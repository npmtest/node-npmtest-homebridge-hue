{"/home/travis/build/npmtest/node-npmtest-homebridge-hue/test.js":"/* istanbul instrument in package npmtest_homebridge_hue */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-hue/lib.npmtest_homebridge_hue.js":"/* istanbul instrument in package npmtest_homebridge_hue */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_hue = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_hue = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-hue/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-hue && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_hue */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_hue\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_hue.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_homebridge_hue.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_hue.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_homebridge_hue.__dirname + '/lib.npmtest_homebridge_hue.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-hue/node_modules/homebridge-hue/index.js":"// homebridge-hue/index.js\n// Copyright © 2016, 2017 Erik Baauw. All rights reserved.\n//\n// Homebridge plug-in for Philips Hue.\n\n'use strict';\n\nconst dynamic = false;\n\nconst HuePlatformModule = require('./lib/HuePlatform');\nconst HuePlatform = HuePlatformModule.HuePlatform;\n\nmodule.exports = function(homebridge) {\n  HuePlatformModule.setHomebridge(homebridge);\n  homebridge.registerPlatform('homebridge-hue', 'Hue', HuePlatform, dynamic);\n};\n","/home/travis/build/npmtest/node-npmtest-homebridge-hue/node_modules/homebridge-hue/lib/HuePlatform.js":"// homebridge-hue/lib/HuePlatform.js\n// Copyright © 2016, 2017 Erik Baauw. All rights reserved.\n//\n// Homebridge plugin for Philips Hue.\n//\n// HuePlatform provides the platform for support Philips Hue bridges and\n// connected devices.  The platform provides discovery of bridges and setting\n// up a heartbeat to poll the bridges.\n//\n// Todo:\n// - Dynamic homebridge accessories.\n// - Store user (bridge password) in context of homebridge accessory for bridge.\n\n'use strict';\n\nconst deferred = require('deferred');\nconst dgram = require('dgram');\nconst request = require('request');\nconst util = require('util');\n\nconst HueBridgeModule = require('./HueBridge');\nconst HueBridge = HueBridgeModule.HueBridge;\nconst packageConfig = require('../package.json');\n\nmodule.exports = {\n  HuePlatform: HuePlatform,\n  setHomebridge: setHomebridge\n};\n\n// Parse a UPnP message into an object\nfunction upnpParseMessage(message) {\n  const obj = {};\n  const lines = message.toString().split('\\r\\n');\n  if (lines && lines[0]) {\n    obj.status = lines[0];\n    for (const line in lines) {\n      const fields = lines[line].split(': ');\n      if (fields.length === 2) {\n        obj[fields[0].toLowerCase()] = fields[1];\n      }\n    }\n  }\n  return obj;\n}\n\nfunction toIntBetween(value, minValue, maxValue, defaultValue) {\n  const n = Number(value);\n  if (isNaN(n) || n !== Math.floor(n) || n < minValue || n > maxValue) {\n    return defaultValue;\n  }\n  return n;\n}\n\n// ===== Homebridge ============================================================\n\nlet Accessory;\nlet Service;\nlet Characteristic;\nlet homebridgeVersion;\n\nfunction setHomebridge(homebridge) {\n  Accessory = homebridge.platformAccessory;\n  Service = homebridge.hap.Service;\n  Characteristic = homebridge.hap.Characteristic;\n  homebridgeVersion = homebridge.serverVersion;\n\n  Characteristic.ProgrammableSwitchEvent.SINGLE_PRESS = 0;\n  Characteristic.ProgrammableSwitchEvent.DOUBLE_PRESS = 1;\n  Characteristic.ProgrammableSwitchEvent.LONG_PRESS = 2;\n\n  Characteristic.Resource = function() {\n    Characteristic.call(this, 'Resource', Characteristic.Resource.UUID);\n    this.setProps({\n      format: Characteristic.Formats.STRING,\n      perms: [Characteristic.Perms.READ]\n    });\n    this.value = this.getDefaultValue();\n  };\n  util.inherits(Characteristic.Resource, Characteristic);\n  Characteristic.Resource.UUID = '00000021-0000-1000-8000-656261617577';\n\n  Characteristic.Enabled = function() {\n    Characteristic.call(this, 'Enabled', Characteristic.Enabled.UUID);\n    this.setProps({\n      format: Characteristic.Formats.BOOL,\n      perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY,\n      \t      Characteristic.Perms.WRITE]\n    });\n    this.value = this.getDefaultValue();\n  };\n  util.inherits(Characteristic.Enabled, Characteristic);\n  Characteristic.Enabled.UUID = '00000022-0000-1000-8000-656261617577';\n\n  Characteristic.LastUpdated = function() {\n    Characteristic.call(this, 'Last Updated', Characteristic.LastUpdated.UUID);\n    this.setProps({\n      format: Characteristic.Formats.STRING,\n      perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY]\n    });\n    this.value = this.getDefaultValue();\n  };\n  util.inherits(Characteristic.LastUpdated, Characteristic);\n  Characteristic.LastUpdated.UUID = '00000023-0000-1000-8000-656261617577';\n\n  Characteristic.Heartrate = function() {\n    Characteristic.call(this, 'Heartrate', Characteristic.Heartrate.UUID);\n    this.setProps({\n      format: Characteristic.Formats.INT,\n      unit: Characteristic.Units.SECONDS,\n      minValue: 1,\n      maxValue: 30,\n      stepValue: 1,\n      perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY,\n              Characteristic.Perms.WRITE]\n    });\n    this.value = this.getDefaultValue();\n  };\n  util.inherits(Characteristic.Heartrate, Characteristic);\n  Characteristic.Heartrate.UUID = '00000024-0000-1000-8000-656261617577';\n\n  Characteristic.Dark = function() {\n    Characteristic.call(this, 'Dark', Characteristic.Dark.UUID);\n    this.setProps({\n      format: Characteristic.Formats.BOOL,\n      perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY]\n    });\n    this.value = this.getDefaultValue();\n  };\n  util.inherits(Characteristic.Dark, Characteristic);\n  Characteristic.Dark.UUID = '00000025-0000-1000-8000-656261617577';\n\n  Characteristic.Daylight = function() {\n    Characteristic.call(this, 'Daylight', Characteristic.Daylight.UUID);\n    this.setProps({\n      format: Characteristic.Formats.BOOL,\n      perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY]\n    });\n    this.value = this.getDefaultValue();\n  };\n  util.inherits(Characteristic.Daylight, Characteristic);\n  Characteristic.Daylight.UUID = '00000026-0000-1000-8000-656261617577';\n\n  Characteristic.Status = function() {\n    Characteristic.call(this, 'Status', Characteristic.Status.UUID);\n    this.setProps({\n      minValue: 0,\n      maxValue: 255,\n      minStep: 1,\n      format: Characteristic.Formats.INT,\n      perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY,\n              Characteristic.Perms.WRITE]\n    });\n    this.value = this.getDefaultValue();\n  };\n  util.inherits(Characteristic.Status, Characteristic);\n  Characteristic.Status.UUID = '00000027-0000-1000-8000-656261617577';\n\n  Characteristic.AnyOn = function() {\n    Characteristic.call(this, 'Any On', Characteristic.AnyOn.UUID);\n    this.setProps({\n      format: Characteristic.Formats.BOOL,\n      perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY,\n              Characteristic.Perms.WRITE]\n    });\n    this.value = this.getDefaultValue();\n  };\n  util.inherits(Characteristic.AnyOn, Characteristic);\n  Characteristic.AnyOn.UUID = '00000028-0000-1000-8000-656261617577';\n\n  Characteristic.LastTriggered = function() {\n    Characteristic.call(\n      this, 'Last Triggered', Characteristic.LastTriggered.UUID\n    );\n    this.setProps({\n      format: Characteristic.Formats.STRING,\n      perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY]\n    });\n    this.value = this.getDefaultValue();\n  };\n  util.inherits(Characteristic.LastTriggered, Characteristic);\n  Characteristic.LastTriggered.UUID = '00000029-0000-1000-8000-656261617577';\n\n  Characteristic.TimesTriggered = function() {\n    Characteristic.call(\n      this, 'Times Triggered', Characteristic.TimesTriggered.UUID\n    );\n    this.setProps({\n      format: Characteristic.Formats.INT,\n      perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY]\n    });\n    this.value = this.getDefaultValue();\n  };\n  util.inherits(Characteristic.TimesTriggered, Characteristic);\n  Characteristic.TimesTriggered.UUID = '0000002A-0000-1000-8000-656261617577';\n\n  Characteristic.Sensitivity = function() {\n    Characteristic.call(\n      this, 'Sensitivity', Characteristic.Sensitivity.UUID\n    );\n    this.setProps({\n      format: Characteristic.Formats.UINT8,\n      minValue: 0,\n      maxValue: 2,\n      stepValue: 1,\n      perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY,\n      \t      Characteristic.Perms.WRITE]\n    });\n    this.value = this.getDefaultValue();\n  };\n  util.inherits(Characteristic.Sensitivity, Characteristic);\n  Characteristic.Sensitivity.UUID = '0000002B-0000-1000-8000-656261617577';\n\n  Characteristic.Duration = function() {\n    Characteristic.call(\n      this, 'Duration', Characteristic.Duration.UUID\n    );\n    this.setProps({\n      format: Characteristic.Formats.UINT16,\n      unit: 'm',\n      minValue: 0,\n      maxValue: 120,\n      stepValue: 1,\n      perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY,\n      \t      Characteristic.Perms.WRITE]\n    });\n    this.value = this.getDefaultValue();\n  };\n  util.inherits(Characteristic.Duration, Characteristic);\n  Characteristic.Duration.UUID = '0000002C-0000-1000-8000-656261617577';\n\n  Characteristic.Link = function() {\n    Characteristic.call(\n      this, 'Link', Characteristic.Link.UUID\n    );\n    this.setProps({\n      format: Characteristic.Formats.BOOL,\n      perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY,\n              Characteristic.Perms.WRITE]\n    });\n    this.value = this.getDefaultValue();\n  };\n  util.inherits(Characteristic.Link, Characteristic);\n  Characteristic.Link.UUID = '0000002D-0000-1000-8000-656261617577';\n\n  Characteristic.Touchlink = function() {\n    Characteristic.call(\n      this, 'Touchlink', Characteristic.Touchlink.UUID\n    );\n    this.setProps({\n      format: Characteristic.Formats.BOOL,\n      perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY,\n              Characteristic.Perms.WRITE]\n    });\n    this.value = this.getDefaultValue();\n  };\n  util.inherits(Characteristic.Touchlink, Characteristic);\n  Characteristic.Touchlink.UUID = '0000002E-0000-1000-8000-656261617577';\n\n  // Custome HomeKit service for Hue bridge resource.\n  Service.Resource = function(displayName, subtype) {\n    Service.call(this, displayName, Service.Resource.UUID, subtype);\n    this.addCharacteristic(Characteristic.Enabled);\n    this.addOptionalCharacteristic(Characteristic.LastTriggered);\n    this.addOptionalCharacteristic(Characteristic.TimesTriggered);\n    this.addOptionalCharacteristic(Characteristic.StatusActive);\n    this.addOptionalCharacteristic(Characteristic.Resource);\n  };\n  util.inherits(Service.Resource, Service);\n  Service.Resource.UUID = '00000011-0000-1000-8000-656261617577';\n\n  // Custome HomeKit service for a Hue bridge.\n  Service.HueBridge = function(displayName, subtype) {\n    Service.call(this, displayName, Service.HueBridge.UUID, subtype);\n    this.addCharacteristic(Characteristic.Heartrate);\n    this.addCharacteristic(Characteristic.LastUpdated);\n    this.addOptionalCharacteristic(Characteristic.Link);\n    this.addOptionalCharacteristic(Characteristic.Touchlink);\n  };\n  util.inherits(Service.HueBridge, Service);\n  Service.HueBridge.UUID = '00000012-0000-1000-8000-656261617577';\n\n  // Custom HomeKit service for a CLIPGenericStatus sensor.\n  Service.Status = function(displayName, subtype) {\n    Service.call(this, displayName, Service.Status.UUID, subtype);\n    this.addCharacteristic(Characteristic.Status);\n  };\n  util.inherits(Service.Status, Service);\n  Service.Status.UUID = '00000013-0000-1000-8000-656261617577';\n\n  // Custom homekit characteristic for Colour Temperature in Kelvin.\n  // Source: as exposed by Nanoleaf and recognised by Elgato's Eve.\n  Characteristic.ColorTemperature = function() {\n    Characteristic.call(\n      this, 'Color Temperature', Characteristic.ColorTemperature.UUID\n    );\n    this.setProps({\n      format: Characteristic.Formats.INT,\n      unit: 'K',\n      minValue: 2000,\n      maxValue: 6536,\n      stepValue: 1,\n      perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY,\n      \t      Characteristic.Perms.WRITE]\n    });\n    this.value = this.getDefaultValue();\n  };\n  util.inherits(Characteristic.ColorTemperature, Characteristic);\n  Characteristic.ColorTemperature.UUID = 'A18E5901-CFA1-4D37-A10F-0071CEEEEEBD';\n\n  // Custom homekit characteristic for Color Temperature in Mired.\n  // Source: as exposed by the Philips Hue bridge v2.\n  Characteristic.CT = function() {\n    Characteristic.call(\n      this, 'Color Temperature', Characteristic.CT.UUID\n    );\n    this.setProps({\n      format: Characteristic.Formats.INT,\n      unit: 'mired',\n      minValue: 153,\n      maxValue: 500,\n      stepValue: 1,\n      perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY,\n      \t      Characteristic.Perms.WRITE]\n    });\n    this.value = this.getDefaultValue();\n  };\n  util.inherits(Characteristic.CT, Characteristic);\n  Characteristic.CT.UUID = 'E887EF67-509A-552D-A138-3DA215050F46';\n\n  // Custom HomeKit characteristic for Unique ID.\n  // Source: as exposed by the Philips Hue bridge.  This characteristic is used\n  // by the Hue app to select the accessories when syncing Hue bridge Room\n  // groups to HomeKit rooms.\n  Characteristic.UniqueID = function() {\n    Characteristic.call(\n      this, 'Unique ID', Characteristic.UniqueID.UUID\n    );\n    this.setProps({\n      format: Characteristic.Formats.STRING,\n      perms: [Characteristic.Perms.READ]\n    });\n    this.value = this.getDefaultValue();\n  };\n  util.inherits(Characteristic.UniqueID, Characteristic);\n  Characteristic.UniqueID.UUID = 'D8B76298-42E7-5FFD-B1D6-1782D9A1F936';\n\n  HueBridgeModule.setHomebridge(homebridge);\n}\n\n// ===== HuePlatform ===========================================================\n\nfunction HuePlatform(log, config, api) {\n  this.log = log;\n  this.api = api;\n  this.config = {\n    ct: false,\n    excludeSensorTypes: {},\n    groups: false,\n    group0: false,\n    heartrate: 5,\n    hosts: [],\n    lights: false,\n    linkbutton: true,\n    lowBattery: 25,\n    philipsLights: false,\n    rules: false,\n    rooms: false,\n    schedules: false,\n    sensors: false,\n    timeout: 5,\n    users: {},\n    waitTimeResend: 300,\n    waitTimeUpdate: 20,\n    wallSwitch: false\n  };\n  for (const key in config) {\n    const value = config[key];\n    switch (key.toLowerCase()) {\n      case 'ct':\n        this.config.ct = value ? true : false;\n        break;\n      case 'excludesensortypes':\n        if (Array.isArray(value)) {\n          for (const type of value) {\n            this.config.excludeSensorTypes[type] = true;\n          }\n        } else {\n          this.log.error(\n            'config.json: %s: warning: ignoring non-array value', key\n          );\n        }\n        break;\n      case 'groups':\n        this.config.groups = value ? true : false;\n        break;\n      case 'group0':\n        this.config.group0 = value ? true : false;\n        break;\n      case 'heartrate':\n        this.config.heartrate = toIntBetween(\n          value, 1, 30, this.config.heartrate\n        );\n        break;\n      case 'host':\n      case 'hosts':\n        if (Array.isArray(value)) {\n          for (const host of value) {\n            if (host !== '') {\n              this.config.hosts.push(host);\n            }\n          }\n        } else if (value !== '') {\n          this.config.hosts.push(value);\n        }\n        break;\n      case 'lights':\n        this.config.lights = value ? true : false;\n        break;\n      case 'linkbutton':\n        this.config.linkbutton = value ? true : false;\n        break;\n      case 'lowbattery':\n        this.config.lowBattery = toIntBetween(\n          value, 0, 100, this.config.lowBattery\n        );\n        break;\n      case 'name':\n        this.name = value;\n        break;\n      case 'parallelrequests':\n        this.config.parallelRequests = toIntBetween(\n          value, 1, 30, this.config.parallelRequests\n        );\n        break;\n      case 'philipslights':\n        this.config.philipsLights = value ? true : false;\n        break;\n      case 'platform':\n        break;\n      case 'rooms':\n        this.config.rooms = value ? true : false;\n        break;\n      case 'rules':\n        this.config.rules = value ? true : false;\n        break;\n      case 'schedules':\n        this.config.schedules = value ? true : false;\n        break;\n      case 'sensors':\n        this.config.sensors = value ? true : false;\n        break;\n      case 'timeout':\n        this.config.timeout = toIntBetween(\n          value, 5, 30, this.config.timeout\n        );\n        break;\n      case 'users':\n        this.config.users = value;\n        break;\n      case 'waittimeresend':\n        this.config.waitTimeResend = toIntBetween(\n          value, 100, 1000, this.config.waitTimeResend\n        );\n        break;\n      case 'waittimeswitch':\n        this.log.error('config.json: warning: %s: deprecated', key);\n        break;\n      case 'waittimeupdate':\n        this.config.waitTimeUpdate = toIntBetween(\n          value, 0, 500, this.config.waitTimeUpdate\n        );\n        break;\n      case 'wallswitch':\n        this.config.wallSwitch = value ? true : false;\n        break;\n      default:\n        this.log.error('config.json: warning: %s: ignoring unknown key', key);\n    }\n  }\n  this.bridgeMap = {};\n  this.bridges = [];\n  this.log.info(\n    '%s v%s, node %s, homebridge v%s', packageConfig.name,\n    packageConfig.version, process.version, homebridgeVersion\n  );\n}\n\nHuePlatform.prototype.accessories = function(callback) {\n  let accessoryList = [];\n  this.findBridges().map(function(ipaddress) {\n    const bridge = new HueBridge(this, ipaddress);\n    this.bridges.push(bridge);\n    return bridge.accessories();\n  }.bind(this)).map(function(list) {\n    for (const a of list) {\n      accessoryList.push(a);\n    }\n  }.bind(this)).then(function () {\n    if (accessoryList.length > 0) {\n      // Setup heartbeat.\n      let beat = -1;\n      setInterval(function() {\n        beat += 1;\n        beat %= 7 * 24 * 3600;\n        for (const bridge of this.bridges) {\n          bridge.heartbeat(beat);\n        }\n      }.bind(this), 1000);\n    }\n    while (accessoryList.length > 99) {\n      const a = accessoryList.pop();\n      this.log.error('too many accessories, ignoring %s', a.name);\n    }\n    callback(accessoryList);\n  }.bind(this))\n  .catch(function(err) {\n    if (err.message) {\n      this.log.error(err.message);\n    }\n    callback(null);\n  }.bind(this));\n};\n\n// Return promise to list of ipaddresses of found Hue bridges.\nHuePlatform.prototype.findBridges = function() {\n  if (this.config.hosts.length > 0) {\n    const list = [];\n    for (const host of this.config.hosts) {\n      list.push(host);\n    }\n    return deferred(list);\n  }\n  const d = deferred();\n  deferred(this.nupnpSearch(), this.upnpSearch()).then(function(lists) {\n    const map = {};\n    for (const list of lists) {\n      for (const ip of list) {\n        map[ip] = true;\n      }\n    }\n    d.resolve(Object.keys(map));\n  }.bind(this));\n  return d.promise;\n};\n\n// Get Hue bridges from meethue portal.\nHuePlatform.prototype.nupnpSearch = function() {\n  const d = deferred();\n  const list = [];\n  const requestObj = {\n    method: 'GET',\n    url: 'https://www.meethue.com/api/nupnp',\n    timeout: 1000 * this.config.timeout,\n    json: true\n  };\n  this.log.debug('meethue portal: get /api/nupnp');\n  request(requestObj, function(err, response, responseBody) {\n    if (err) {\n      this.log.error('meethue portal: communication error %s', err.code);\n      return d.reject(err.code);\n    }\n    if (response.statusCode != 200) {\n      this.log.error('meethue portal: status %s', response.statusCode);\n      return d.reject(response.statusCode);\n    }\n    if (responseBody.length === 0) {\n      this.log.info('meethue portal: no bridges registered');\n    } else {\n      for (const bridge of responseBody) {\n        this.log.debug(\n          'meethue portal: found bridge %s at %s',\n          bridge.id.toUpperCase(), bridge.internalipaddress\n        );\n        list.push(bridge.internalipaddress);\n      }\n    }\n    return d.resolve(list);\n  }.bind(this));\n  return d.promise;\n};\n\n// Do a UPnP search for Hue bridges.\nHuePlatform.prototype.upnpSearch = function() {\n  const d = deferred();\n  const list = [];\n  const map = {};\n  const upnp = {\n    ipaddress: '239.255.255.250',\n    port: 1900\n  };\n  const socket = dgram.createSocket('udp4');\n  const request = new Buffer([\n    'M-SEARCH * HTTP/1.1',\n    'HOST: ' + upnp.ipaddress + ':' + upnp.port,\n    'MAN: \"ssdp:discover\"',\n    'MX: 5',\n    'ST: upnp:rootdevice',\n    ''\n  ].join('\\r\\n'));\n  socket.on('message', function(message, rinfo) {\n    const response = upnpParseMessage(message);\n    if (\n      response.status === 'HTTP/1.1 200 OK' &&\n      response.st && response.st === 'upnp:rootdevice' &&\n      response['hue-bridgeid']\n    ) {\n      const ipaddress = rinfo.address;\n      const bridgeid = response['hue-bridgeid'];\n      if (!map[ipaddress]) {\n        this.log.debug(\n          'upnp search: found bridge %s at %s', bridgeid, ipaddress\n        );\n        map[ipaddress] = bridgeid;\n        list.push(ipaddress);\n      }\n    }\n  }.bind(this));\n  socket.on('error', function(err) {\n    this.log.error('upnp search: error %s', err.code);\n    socket.close();\n    d.resolve(list);\n  }.bind(this));\n  socket.on('listening', function() {\n    this.log.debug(\n      'upnp search: searching at %s:%d for %d seconds',\n      upnp.ipaddress, upnp.port, this.config.timeout\n    );\n    setTimeout(function () {\n      socket.close();\n      this.log.debug('upnp search: done');\n      d.resolve(list);\n    }.bind(this), 1000 * this.config.timeout);\n  }.bind(this));\n  socket.send(\n    request, 0, request.length, upnp.port, upnp.ipaddress\n  );\n  return d.promise;\n};\n","/home/travis/build/npmtest/node-npmtest-homebridge-hue/node_modules/homebridge-hue/lib/HueBridge.js":"// homebridge-hue/lib/HueBridge.js\n// Copyright © 2016, 2017 Erik Baauw. All rights reserved.\n//\n// Homebridge plugin for Philips Hue.\n//\n// HueBridge provides support for Philips Hue bridges.\n//\n// Todo:\n// - Support rules in separate accessories.\n\n'use strict';\n\nconst deferred = require('deferred');\nconst fs = require('fs');\nconst os = require('os');\nconst request = require('request');\nconst util = require('util');\n\nconst HueLightModule = require('./HueLight');\nconst HueSensorModule = require('./HueSensor');\nconst HueScheduleModule = require('./HueSchedule');\nconst HueLight = HueLightModule.HueLight;\nconst HueSensor = HueSensorModule.HueSensor;\nconst HueSchedule = HueScheduleModule.HueSchedule;\n\nmodule.exports = {\n  setHomebridge: setHomebridge,\n  HueBridge: HueBridge\n};\n\n// ===== Homebridge ============================================================\n\nlet Accessory;\nlet Service;\nlet Characteristic;\n\nfunction setHomebridge(homebridge) {\n  HueLightModule.setHomebridge(homebridge);\n  HueSensorModule.setHomebridge(homebridge);\n  HueScheduleModule.setHomebridge(homebridge);\n  Accessory = homebridge.platformAccessory;\n  Service = homebridge.hap.Service;\n  Characteristic = homebridge.hap.Characteristic;\n}\n\n// ===== HueBridge =============================================================\n\nfunction HueBridge(platform, host) {\n  this.log = platform.log;\n  this.platform = platform;\n  this.name = host;\n  this.url = 'http://' + host + '/api';\n  this.state = {\n    heartrate: this.platform.config.heartrate,\n    request: 0,\n    touchlink: false\n  };\n  this.serviceList = [];\n  this.lights = {};\n  this.groups = {};\n  this.sensors = {};\n  this.schedules = {};\n  this.rules = {};\n}\n\nHueBridge.prototype.getServices = function() {\n  this.log.info('%s: %d services', this.name, this.serviceList.length);\n  return this.serviceList;\n};\n\nHueBridge.prototype.accessories = function() {\n  // jshint -W106\n  this.accessoryMap = {};\n  this.accessoryList = [];\n  return this._request('get', '/config').then(function(obj) {\n    this.name = obj.name;\n    this.uuid_base = obj.bridgeid;\n    this.username = this.platform.config.users[this.uuid_base] || '';\n    if (this.platform.config.parallelRequests) {\n      this.parallelRequests = this.platform.config.parallelRequests;\n    } else {\n      this.parallelRequests = obj.modelid === 'BSB001' ? 3 : 10;\n    }\n    this.request = deferred.gate(this._request, this.parallelRequests);\n    this.infoService = new Service.AccessoryInformation();\n    this.serviceList.push(this.infoService);\n    this.infoService\n      .updateCharacteristic(Characteristic.Manufacturer, 'Philips')\n      .updateCharacteristic(Characteristic.Model, obj.modelid)\n      .updateCharacteristic(Characteristic.SerialNumber, this.uuid_base);\n    this.obj = obj;\n    this.obj.linkbutton = false;\n    this.refresh();\n    this.service = new Service.HueBridge(this.name);\n    this.serviceList.push(this.service);\n    this.service.getCharacteristic(Characteristic.Heartrate)\n      .updateValue(this.state.heartrate)\n      .on('set', this.setHeartrate.bind(this));\n    this.service.getCharacteristic(Characteristic.LastUpdated)\n      .updateValue(this.hk.lastupdated);\n    this.service.getCharacteristic(Characteristic.Link)\n      .updateValue(this.hk.link)\n      .on('set', this.setLink.bind(this));\n    this.service.getCharacteristic(Characteristic.Touchlink)\n      .updateValue(this.hk.touchlink)\n      .on('set', this.setTouchlink.bind(this));\n    if (this.platform.config.linkbutton) {\n      this.switchService = new Service.StatelessProgrammableSwitch(this.name);\n      this.serviceList.push(this.switchService);\n      this.switchService.getCharacteristic(Characteristic.ProgrammableSwitchEvent)\n        .setProps({\n          minValue: Characteristic.ProgrammableSwitchEvent.SINGLE_PRESS,\n          maxValue: Characteristic.ProgrammableSwitchEvent.SINGLE_PRESS\n        });\n    }\n    this.accessoryList.push(this);\n    this.log.info(\n      '%s: %s bridge, api v%s', this.name, obj.modelid, obj.apiversion\n    );\n    if (\n      obj.apiversion != '1.15.0' &&\n      obj.apiversion != '1.16.0' &&\n      obj.apiversion != '1.17.0') {\n      this.log.error('%s: warning api version %s', this.name, obj.apiversion);\n    }\n  }.bind(this))\n  .then(this.createUser.bind(this))\n  .then(this.createGroup0.bind(this))\n  .then(this.createResources.bind(this))\n  .catch(function(err) {\n    if (err.message) {\n      this.log.error(err.message);\n    }\n  }.bind(this))\n  .then(function() {\n    this.log.info('%s: %d accessories', this.name, this.accessoryList.length);\n    return this.accessoryList;\n  }.bind(this));\n};\n\nHueBridge.prototype.createUser = function() {\n  if (this.username) {\n    this.url += '/' + this.username;\n    return deferred(true);\n  }\n  const d = deferred();\n  // jshint -W106\n  const devicetype = ('homebridge-hue#' + os.hostname().split('.')[0])\n    .substr(0, 40);\n  this.request('post', '/', {devicetype: devicetype})\n  .then(function(obj) {\n    this.username = obj[0].success.username;\n    this.url += '/' + this.username;\n    let s = '\\n';\n    s += '  \"platforms\": [\\n';\n    s += '    \"platform\": \"Hue\",\\n';\n    s += '    \"name\": \"Hue\",\\n';\n    s += '    \"users\": {\\n';\n    s += '      \"' + this.uuid_base + '\": \"' + this.username + '\"\\n';\n    s += '    }\\n';\n    s += '  ]';\n    this.log.info(\n      '%s: created user - please edit config.json and restart homebridge%s',\n    \tthis.name, s\n    );\n    d.resolve();\n  }.bind(this))\n  .catch(function (err) {\n    this.log.info(\n      '%s: press link button on the bridge to create a user', this.name\n    );\n    setTimeout(function() {\n      d.resolve(this.createUser());\n    }.bind(this), 15000);\n  }.bind(this));\n  return d.promise;\n};\n\nHueBridge.prototype.createResources = function() {\n  // jshint -W106\n  return this._request('get', '/').then(function(obj) {\n    if (this.platform.config.lights) {\n      for (const id in obj.lights) {\n        const lightObj = obj.lights[id];\n        if (\n          this.platform.config.philipsLights ||\n          lightObj.manufacturername !== 'Philips'\n        ) {\n          this.log.debug(\n            '%s: /lights/%d: %s %s (%s) \"%s\"', this.name, id,\n            lightObj.manufacturername, lightObj.modelid, lightObj.type,\n            lightObj.name\n          );\n          const light = new HueLight(this, id, lightObj);\n          this.lights[id] = light;\n          const uuid = light.uuid_base;\n          const accessory = this.accessoryMap[uuid];\n          if (accessory) {\n            accessory.serviceList.push(light.service);\n          } else {\n            this.accessoryMap[uuid] = light;\n            this.accessoryList.push(light);\n          }\n        } else {\n          this.log.debug(\n            '%s: /lights/%d: ignoring %s %s (%s) \"%s\"', this.name, id,\n            lightObj.manufacturername, lightObj.modelid, lightObj.type,\n            lightObj.name\n          );\n        }\n      }\n    }\n    this.log.debug('%s: %d lights', this.name, Object.keys(this.lights).length);\n    if (this.platform.config.groups) {\n      for (const id in obj.groups) {\n        const group = obj.groups[id];\n        if (this.platform.config.rooms || group.type !== 'Room') {\n          this.log.debug(\n            '%s: /groups/%d: %s \"%s\"', this.name, id, group.type, group.name\n          );\n          this.groups[id] = new HueLight(this, id, group, 'group');\n          this.accessoryList.push(this.groups[id]);\n        } else {\n          this.log.debug(\n            '%s: /groups/%d: ingoring %s \"%s\"', this.name, id,\n            group.type, group.name\n          );\n        }\n      }\n    }\n    this.log.debug('%s: %d groups', this.name, Object.keys(this.groups).length);\n    if (this.platform.config.sensors) {\n      for (const id in obj.sensors) {\n        const sensorObj = obj.sensors[id];\n        if (this.platform.config.excludeSensorTypes[sensorObj.type] ||\n            (sensorObj.type.substring(0, 4) === 'CLIP'  &&\n             this.platform.config.excludeSensorTypes.CLIP)) {\n          this.log.debug(\n            '%s: /sensors/%d: ignoring %s sensor \"%s\"', this.name, id,\n            sensorObj.type, sensorObj.name\n          );\n        } else {\n          this.log.debug(\n            '%s: /sensors/%d: %s sensor \"%s\"', this.name, id,\n            sensorObj.type, sensorObj.name\n          );\n          const sensor = new HueSensor(this, id, sensorObj);\n          this.sensors[id] = sensor;\n          const uuid = sensor.uuid_base;\n          const accessory = this.accessoryMap[uuid];\n          if (accessory) {\n            accessory.serviceList.push(sensor.service);\n          } else {\n            this.accessoryMap[uuid] = sensor;\n            this.accessoryList.push(sensor);\n          }\n        }\n      }\n    }\n    this.log.debug(\n      '%s: %d sensors', this.name, Object.keys(this.sensors).length\n    );\n    if (this.platform.config.schedules) {\n      for (const id in obj.schedules) {\n        const schedule = obj.schedules[id];\n        this.log.debug(\n          '%s: /schedules/%d: \"%s\"', this.name, id, schedule.name\n        );\n        this.schedules[id] = new HueSchedule(this, id, schedule);\n        // this.accessoryList.push(this.schedules[id]);\n        if (this.serviceList.length < 99) {\n          this.serviceList.push(this.schedules[id].service);\n        }\n      }\n    }\n    this.log.debug(\n      '%s: %d schedules', this.name, Object.keys(this.schedules).length\n    );\n    if (this.platform.config.rules) {\n      for (const id in obj.rules) {\n        const rule = obj.rules[id];\n        this.log.debug('%s: /rules/%d: \"%s\"', this.name, id, rule.name);\n        this.rules[id] = new HueSchedule(this, id, rule, 'rule');\n        // this.accessoryList.push(this.rules[id]);\n        if (this.serviceList.length < 99) {\n          this.serviceList.push(this.rules[id].service);\n        }\n      }\n    }\n    this.log.debug('%s: %d rules', this.name, Object.keys(this.rules).length);\n  }.bind(this));\n};\n\nHueBridge.prototype.createGroup0 = function() {\n  if (!this.platform.config.groups || !this.platform.config.group0) {\n    return deferred(true);\n  }\n  return this.request('get', '/groups/0').then(function(group) {\n    this.log.debug('%s: /groups/0: %s \"%s\"', this.name, group.type, group.name);\n    this.groups[0] = new HueLight(this, 0, group, 'group');\n    this.accessoryList.push(this.groups[0]);\n  }.bind(this));\n};\n\nHueBridge.prototype.refresh = function() {\n  this.hk = {};\n  this.hk.lastupdated = this.obj.UTC ?\n    String(new Date(this.obj.UTC)).substring(0, 25) : 'n/a';\n  this.hk.link = this.obj.linkbutton ? 1 : 0;\n  this.hk.touchlink = this.state.touchlink ? 1 : 0;\n};\n\n// ===== Heartbeat =============================================================\n\nHueBridge.prototype.heartbeat = function(beat) {\n  if (beat % this.state.heartrate === 0 && this.request) {\n    this.heartbeatConfig()\n    .then(this.heartbeatSensors.bind(this))\n    .then(this.heartbeatLights.bind(this))\n    .then(this.heartbeatGroups.bind(this))\n    .then(this.heartbeatGroup0.bind(this))\n    .then(this.heartbeatSchedules.bind(this))\n    .then(this.heartbeatRules.bind(this))\n    .catch(function (err) {\n      if (err.message) {\n        this.log.error(err.message);\n      }\n    }.bind(this));\n  }\n};\n\nHueBridge.prototype.heartbeatConfig = function() {\n  return this.request('get', '/config').then(function(obj) {\n    const old = {\n      obj: this.obj,\n      hk: this.hk\n    };\n    this.obj = obj;\n    this.refresh();\n    this.service\n      .updateCharacteristic(Characteristic.LastUpdated, this.hk.lastupdated);\n    if (this.obj.linkbutton !== old.obj.linkbutton) {\n      if (this.platform.config.linkbutton && this.obj.linkbutton) {\n        this.log.debug(\n          '%s: bridge linkbutton on %s', this.name, this.obj.UTC\n        );\n        this.log(\n          '%s: homekit linkbutton single press', this.switchService.displayName\n        );\n        this.hk.link = 0;\n        this.switchService\n          .updateCharacteristic(Characteristic.ProgrammableSwitchEvent, 0);\n        this.request('put', '/config', {linkbutton: false}).then(function() {\n          this.obj.linkbutton = false;\n        }.bind(this));\n      } else {\n        this.log.debug(\n          '%s: bridge linkbutton changed from %s to %s', this.name,\n          old.obj.linkbutton, this.obj.linkbutton\n        );\n      }\n    }\n    if (this.hk.link !== old.hk.link) {\n      this.log(\n        '%s: set homekit link from %s to %s', this.name,\n        old.hk.link, this.hk.link\n      );\n      this.service.updateCharacteristic(Characteristic.Link, this.hk.link);\n    }\n    if (this.hk.touchlink !== old.hk.touchlink) {\n      this.log(\n        '%s: set homekit touchlink from %s to %s', this.name,\n        old.hk.touchlink, this.hk.touchlink\n      );\n      this.service\n        .updateCharacteristic(Characteristic.Touchlink, this.hk.touchlink);\n    }\n  }.bind(this));\n};\n\nHueBridge.prototype.heartbeatSensors = function() {\n  if (!this.platform.config.sensors) {\n    return deferred(true);\n  }\n  return this.request('get', '/sensors').then(function(sensors) {\n    for (const id in sensors) {\n      const a = this.sensors[id];\n      if (a) {\n        a.heartbeat(sensors[id]);\n      }\n    }\n  }.bind(this));\n};\n\nHueBridge.prototype.heartbeatLights = function() {\n  if (!this.platform.config.lights) {\n    return deferred(true);\n  }\n  return this.request('get', '/lights').then(function(lights) {\n    for (const id in lights) {\n      const a = this.lights[id];\n      if (a) {\n        a.heartbeat(lights[id]);\n      }\n    }\n  }.bind(this));\n};\n\nHueBridge.prototype.heartbeatGroups = function() {\n  if (!this.platform.config.groups) {\n    return deferred(true);\n  }\n  return this.request('get', '/groups').then(function(groups) {\n    for (const id in groups) {\n      const a = this.groups[id];\n      if (a) {\n        a.heartbeat(groups[id]);\n      }\n    }\n  }.bind(this));\n};\n\nHueBridge.prototype.heartbeatGroup0 = function() {\n  if (!this.platform.config.groups || !this.platform.config.group0) {\n    return deferred(true);\n  }\n  return this.request('get', '/groups/0').then(function(obj) {\n    const a = this.groups[0];\n    if (a) {\n      a.heartbeat(obj);\n    }\n  }.bind(this));\n};\n\nHueBridge.prototype.heartbeatSchedules = function() {\n  if (!this.platform.config.schedules) {\n    return deferred(true);\n  }\n  return this.request('get', '/schedules').then(function(schedules) {\n    for (const id in schedules) {\n      const a = this.schedules[id];\n      if (a) {\n        a.heartbeat(schedules[id]);\n      }\n    }\n  }.bind(this));\n};\n\nHueBridge.prototype.heartbeatRules = function() {\n  if (!this.platform.config.rules) {\n    return deferred(true);\n  }\n  return this.request('get', '/rules').then(function(rules) {\n    for (const id in rules) {\n      const a = this.rules[id];\n      if (a) {\n        a.heartbeat(rules[id]);\n      }\n    }\n  }.bind(this));\n};\n\n// ===== Homekit Events ========================================================\n\nHueBridge.prototype.setHeartrate = function(rate, callback) {\n  if (rate === this.state.heartrate) {\n    return callback();\n  }\n  this.log.info(\n    '%s: homekit heartrate changed from %s to %s', this.name,\n    this.state.heartrate, rate\n  );\n  this.state.heartrate = rate;\n  return callback();\n};\n\nHueBridge.prototype.setLink = function(link, callback) {\n  link = link ? 1 : 0;\n  if (link === this.hk.link) {\n    return callback();\n  }\n  this.log.info(\n    '%s: homekit link changed from %s to %s', this.name,\n    this.hk.link, link\n  );\n  this.hk.link = link;\n  const newValue = link ? true : false;\n  this.request('put', '/config', {linkbutton: newValue})\n  .then(function () {\n    this.obj.linkbutton = newValue;\n    return callback();\n  }.bind(this))\n  .catch(function(err) {\n    return callback(new Error(err));\n  }.bind(this));\n};\n\nHueBridge.prototype.setTouchlink = function(touchlink, callback) {\n  touchlink = touchlink ? 1 : 0;\n  if (touchlink === this.hk.touchlink) {\n    return callback();\n  }\n  this.log.info(\n    '%s: homekit touchlink changed from %s to %s', this.name,\n    this.hk.touchlink, touchlink\n  );\n  this.hk.touchlink = touchlink;\n  if (!this.hk.touchlink) {\n    return callback();\n  }\n  const newValue = touchlink ? true : false;\n  this.request('put', '/config', {touchlink: newValue})\n  .then(function() {\n    this.state.touchlink = newValue;\n    setTimeout(function () {\n      this.log.info(\n        '%s: set homekit touchlink from %s to %s', this.name,\n        this.hk.touchlink, 0\n      );\n      this.state.touchlink = false;\n      this.hk.touchlink = 0;\n      this.service.getCharacteristic(Characteristic.Touchlink)\n        .setValue(this.hk.touchlink);\n    }.bind(this), 15000);\n    return callback();\n  }.bind(this))\n  .catch(function (err) {\n    return callback(new Error(err));\n  }.bind(this));\n};\n\nHueBridge.prototype.identify = function(callback) {\n  this.log.info('%s: identify', this.name);\n  callback();\n  this.request('get', '/')\n  .then(function(body) {\n    const filename = this.platform.api.user.storagePath() + \"/\" +\n                     this.name + '.json';\n    this.log.info('%s: dumping masked state to %s', this.name, filename);\n    body.config.bridgeid = 'xxxxxxFFFExxxxxx';\n    body.config.mac = 'xx:xx:xx:xx:xx:xx';\n    body.config.ipaddress = 'xxx.xxx.xxx.xxx';\n    body.config.gateway = 'xxx.xxx.xxx.xxx';\n    if (body.config.proxyaddress !== 'none') {\n      body.config.proxyaddress = 'xxx.xxx.xxx.xxx';\n    }\n    let json = JSON.stringify(body);\n    let i = 0;\n    for (const username in body.config.whitelist) {\n      i += 1;\n      const regexp = RegExp(username, 'g');\n      let mask = username.replace(/./g, 'x');\n      mask = (mask + i).slice(-username.length);\n      json = json.replace(regexp, mask);\n    }\n    fs.writeFile(filename, json, function(err) {\n      if (err) {\n        this.log.error('cannot create %s: error %s', filename, err.code);\n        return;\n      }\n    }.bind(this));\n  }.bind(this))\n  .catch(function(err) {\n    if (err.message) {\n      this.log.error(err.message);\n    }\n  }.bind(this));\n};\n\n// ===== Bridge Communication ==================================================\n\n// Send request to Philips Hue bridge.\nHueBridge.prototype._request = function(method, resource, body) {\n  const d = deferred();\n  const requestObj = {\n    method: method,\n    url: this.url + (resource === '/' ? '' : resource),\n    timeout: 1000 * this.platform.config.timeout,\n    json: true\n  };\n  const requestNumber = ++this.state.request;\n  let requestMsg;\n  requestMsg = util.format.apply(requestMsg, [\n    '%s: hue bridge request #%d: %s %s', this.name,\n    this.state.request, method, resource\n  ]);\n  if (body) {\n    requestObj.body = body;\n    requestMsg = util.format.apply(requestMsg, ['%s %j', requestMsg, body]);\n  }\n  this.log.debug(requestMsg);\n  request(requestObj, function(err, response, responseBody) {\n    if (err) {\n      if (err.code === 'ECONNRESET') {\n        this.log.debug(requestMsg);\n        this.log.debug(\n          '%s: hue bridge communication error %s - retrying in 300ms',\n          this.name, err.code\n        );\n        setTimeout(function () {\n          d.resolve(this._request(method, resource, body));\n        }.bind(this), this.platform.config.waitTimeResend);\n        return;\n      }\n      this.log.error(requestMsg);\n      this.log.error(\n        '%s: hue bridge communication error %s', this.name, err.code\n      );\n      return d.reject(err.code);\n    }\n    if (response.statusCode != 200) {\n      this.log.error(requestMsg);\n      this.log.error(\n        '%s: hue bridge http status %s', this.name, response.statusCode\n      );\n      return d.reject(response.statusCode);\n    }\n    if (util.isArray(responseBody)) {\n      for (const id in responseBody) {\n        const e = responseBody[id].error;\n        if (e) {\n          this.log.error(requestMsg);\n          this.log.error(\n            '%s: hue bridge error %d: %s', this.name, e.type, e.description\n          );\n          return d.reject(e.type);\n        }\n      }\n    }\n    this.log.debug(\n      '%s: hue bridge request #%d: ok', this.name, requestNumber\n    );\n    return d.resolve(responseBody);\n  }.bind(this));\n  return d.promise;\n};\n","/home/travis/build/npmtest/node-npmtest-homebridge-hue/node_modules/homebridge-hue/lib/HueLight.js":"// homebridge-hue/lib/HueLight.js\n// Copyright © 2016, 2017 Erik Baauw. All rights reserved.\n//\n// Homebridge plugin for Philips Hue.\n//\n// HueLight provides support for Philips Hue lights and groups.\n\n'use strict';\n\nmodule.exports = {\n  setHomebridge: setHomebridge,\n  HueLight: HueLight\n};\n\n// ===== Homebridge ============================================================\n\nlet Accessory;\nlet Service;\nlet Characteristic;\n\nfunction setHomebridge(homebridge) {\n  Accessory = homebridge.platformAccessory;\n  Service = homebridge.hap.Service;\n  Characteristic = homebridge.hap.Characteristic;\n}\n\n// Return point in color gamut closest to p.\nfunction closestInGamut(p, gamut) {\n  // Return cross product of two points.\n  function crossProduct(p1, p2) {\n    return p1.x * p2.y - p1.y * p2.x;\n  }\n\n  // Return distance between two points.\n  function distance(p1, p2) {\n    const dx = p1.x - p2.x;\n    const dy = p1.y - p2.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  // Return point on line a,b closest to p.\n  function closest(a, b, p) {\n    const ap = {x: p.x - a.x, y: p.y - a.y};\n    const ab = {x: b.x - a.x, y: b.y - a.y};\n    let t =  (ap.x * ab.x + ap.y * ab.y) / (ab.x * ab.x + ab.y * ab.y);\n    t = t < 0.0 ? 0.0 : t > 1.0 ? 1.0 : t;\n    return {x: a.x + t * ab.x, y: a.y + t * ab.y};\n  }\n\n  const R = gamut.R;\n  const G = gamut.G;\n  const B = gamut.B;\n  const v1 = {x: G.x - R.x, y: G.y - R.y};\n  const v2 = {x: B.x - R.x, y: B.y - R.y};\n  const v = crossProduct(v1, v2);\n  const q = {x: p.x - R.x, y: p.y - R.y};\n  const s = crossProduct(q, v2) / v;\n  const t = crossProduct(v1, q) / v;\n  if (s >= 0.0 && t >= 0.0 && s + t <= 1.0) {\n    return p;\n  }\n  const pRG = closest(R, G, p);\n  const pGB = closest(G, B, p);\n  const pBR = closest(B, R, p);\n  const dRG = distance(p, pRG);\n  const dGB = distance(p, pGB);\n  const dBR = distance(p, pBR);\n  let min = dRG;\n  p = pRG;\n  if (dGB < min) {\n    min = dGB;\n    p = pGB;\n  }\n  if (dBR < min) {\n    p = pBR;\n  }\n  return p;\n}\n\n// Transform bridge xy values [0.0000, 1.0000]\n// to homekit hue value [0˚, 360˚] and saturation value [0%, 100%].\nfunction hueSat(xy, gamut) {\n  // Inverse Gamma correction (sRGB Companding).\n  function compand(v) {\n    return v <= 0.0031308 ?\n      12.92 * v : (1.0 + 0.055) * Math.pow(v, (1.0 / 2.4)) - 0.055;\n  }\n\n  function rescale() {\n    if (R > G && R > B && R > 1.0) {\n      G /= R; B /= R; R = 1.0;\n    } else if (G > R && G > B && G > 1.0) {\n      R /= G; B /= G; G = 1.0;\n    } else if (B > R && B > G && B > 1.0) {\n      R /= B; G /= B; B = 1.0;\n    }\n  }\n\n  // xyY to XYZ to RGB\n  // See: http://www.developers.meethue.com/documentation/color-conversions-rgb-xy\n  const p = closestInGamut({x: xy[0], y: xy[1]}, gamut);\n  const x = p.x;\n  const y = p.y === 0.0 ? 0.0001 : p.y;\n  const z = 1.0 - x - y;\n  const Y = 1.0;\n  const X = (Y / y) * x;\n  const Z = (Y / y) * z;\n  let R = X *  1.656492 + Y * -0.354851 + Z * -0.255038;\n  let G = X * -0.707196 + Y *  1.655397 + Z *  0.036152;\n  let B = X *  0.051713 + Y * -0.121364 + Z *  1.011530;\n  rescale();\n  R = compand(R);\n  G = compand(G);\n  B = compand(B);\n  rescale();\n\n  // RGB to HSV\n  // See: https://en.wikipedia.org/wiki/HSL_and_HSV\n  const M = Math.max(R, G, B);\n  const m = Math.min(R, G, B);\n  const C = M - m;\n  let S = (M === 0.0) ? 0.0 : C / M;\n  S = S > 1.0 ? 1.0 : S;\t\t\t// Deal with negative RGB.\n  let H;\n  switch (M) {\n    case m:\n      H = 0.0;\n      break;\n    case R:\n      H = (G - B) / C;\n      if (H < 0) {\n        H += 6.0;\n      }\n      break;\n    case G:\n      H = (B - R) / C;\n      H += 2.0;\n      break;\n    case B:\n      H = (R - G) / C;\n      H += 4.0;\n      break;\n  }\n  H /= 6.0;\n  return { hue: Math.round(H * 360), sat: Math.round(S * 100) };\n}\n\n// Transform homekit hue value [0˚, 360˚] and saturation value [0%, 100%]\n// to bridge xy values [0.0, 1.0].\nfunction invHueSat(hue, sat, gamut) {\n  // Gamma correction (inverse sRGB Companding).\n  function invCompand(v) {\n    return v > 0.04045 ? Math.pow((v + 0.055) / (1.0 + 0.055), 2.4) : v / 12.92;\n  }\n\n  // HSV to RGB\n  // See: https://en.wikipedia.org/wiki/HSL_and_HSV\n  let H = hue / 360.0;\n  const S = sat / 100.0;\n  const V = 1;\n  const C = V * S;\n  H *= 6;\n  const m = V - C;\n  let x = (H % 2) - 1.0;\n  if (x < 0) {\n    x = -x;\n  }\n  x = C * (1.0 - x);\n  let R, G, B;\n  switch (Math.floor(H) % 6) {\n    case 0: R = C + m; G = x + m; B = m;     break;\n    case 1: R = x + m; G = C + m; B = m;     break;\n    case 2: R = m;     G = C + m; B = x + m; break;\n    case 3: R = m;     G = x + m; B = C + m; break;\n    case 4: R = x + m; G = m;     B = C + m; break;\n    case 5: R = C + m; G = m;     B = x + m; break;\n  }\n\n  // RGB to XYZ to xyY\n  // See: http://www.developers.meethue.com/documentation/color-conversions-rgb-xy\n  const linearR = invCompand(R);\n  const linearG = invCompand(G);\n  const linearB = invCompand(B);\n  const X = linearR * 0.664511 + linearG * 0.154324 + linearB * 0.162028;\n  const Y = linearR * 0.283881 + linearG * 0.668433 + linearB * 0.047685;\n  const Z = linearR * 0.000088 + linearG * 0.072310 + linearB * 0.986039;\n  const sum = X + Y + Z;\n  const p = sum === 0.0 ? {x: 0.0, y: 0.0} : {x: X / sum, y: Y / sum};\n  const q = closestInGamut(p, gamut);\n  return [Math.round(q.x * 10000) / 10000, Math.round(q.y * 10000) / 10000];\n}\n\n// ===== HueLight ==============================================================\n\nfunction HueLight(bridge, id, obj, type) {\n  // jshint -W106\n  this.log = bridge.log;\n  this.bridge = bridge;\n  this.name = obj.name;\n  this.type = type || 'light';\n  this.obj = obj;\n  this.resource = '/' + this.type + 's/' + id;\n  this.key = this.type === 'group' ? 'action' : 'state';\n  this.resourcePath = this.resource + '/' + this.key;\n\n  this.setConfig();\n  this.uuid_base = this.config.serialNumber;\n  this.infoService = new Service.AccessoryInformation();\n  this.serviceList = [this.infoService];\n  this.infoService\n    .updateCharacteristic(Characteristic.Manufacturer, this.config.manufacturer)\n    .updateCharacteristic(Characteristic.Model, this.config.model)\n    .updateCharacteristic(Characteristic.SerialNumber, this.config.serialNumber);\n  if (this.config.bri) {\n    this.service = new Service.Lightbulb(this.name, this.config.subtype);\n  } else {\n    this.service = new Service.Switch(this.name, this.config.subtype);\n  }\n  this.serviceList.push(this.service);\n\n  this.setHK();\n  this.service.getCharacteristic(Characteristic.On)\n    .updateValue(this.hk.on)\n    .on('set', this.setOn.bind(this));\n  if (this.type === 'group') {\n    this.service.addOptionalCharacteristic(Characteristic.AnyOn);\n    this.service.getCharacteristic(Characteristic.AnyOn)\n      .updateValue(this.hk.any_on)\n      .on('set', this.setAnyOn.bind(this));\n  }\n  if (this.config.bri) {\n    this.service.getCharacteristic(Characteristic.Brightness)\n      .updateValue(this.hk.bri)\n      .on('set', this.setBri.bind(this));\n  }\n  if (this.config.ct) {\n    if (this.bridge.platform.config.ct) {\n      this.service.addOptionalCharacteristic(Characteristic.CT);\n      this.service.getCharacteristic(Characteristic.CT)\n        .updateValue(this.state.ct)\n        .on('set', this.setCT.bind(this))\n        .setProps({maxValue: this.config.maxCT});\n    } else {\n      this.service.addOptionalCharacteristic(Characteristic.ColorTemperature);\n      this.service.getCharacteristic(Characteristic.ColorTemperature)\n        .updateValue(this.hk.ct)\n        .on('set', this.setColorTemperature.bind(this))\n        .setProps({minValue: this.colorTemperature(this.config.maxCT)});\n    }\n  }\n  if (this.config.xy || this.config.hs) {\n    this.service.getCharacteristic(Characteristic.Hue)\n      .updateValue(this.hk.hue)\n      .on('set', this.setHue.bind(this));\n    this.service.getCharacteristic(Characteristic.Saturation)\n      .updateValue(this.hk.sat)\n      .on('set', this.setSat.bind(this));\n  }\n  if (this.type === 'light') {\n    this.service.addOptionalCharacteristic(Characteristic.StatusFault);\n    this.service.getCharacteristic(Characteristic.StatusFault)\n      .updateValue(this.hk.fault);\n    if (!this.bridge.platform.config.philipsLights) {\n      this.service.addOptionalCharacteristic(Characteristic.UniqueID);\n      this.service.getCharacteristic(Characteristic.UniqueID)\n        .updateValue(this.obj.uniqueid);\n    }\n  }\n  this.service.addOptionalCharacteristic(Characteristic.Resource);\n  this.service.getCharacteristic(Characteristic.Resource)\n    .updateValue(this.resource);\n}\n\nHueLight.prototype.getServices = function() {\n  return this.serviceList;\n};\n\n// Store bridge state to this.state.\nHueLight.prototype.setState = function() {\n  this.state = this.obj.state;\n  for (const key in this.obj.action) {\n    this.state[key] = this.obj.action[key];\n  }\n};\n\n// Store configuration to this.config.\nHueLight.prototype.setConfig = function() {\n  // jshint -W106\n  this.setState();\n  this.config = {\n    subtype: null,\n    bri: this.state.bri !== undefined,\n    ct: this.state.ct !== undefined,\n    xy: this.state.xy !== undefined\n  };\n  if (this.config.ct) {\n    // Default colour temperature range: 153 (~6500K) - 500 (2000K).\n    this.config.maxCT = 500;\n  }\n  if (this.config.xy) {\n    this.config.gamut = { // Default colour gamut.\n      R: {x: 1.0000, y: 0.0000},\n      G: {x: 0.0000, y: 1.0000},\n      B: {x: 0.0000, y: 0.0000}\n    };\n  }\n  if (this.type === 'group') {\n    this.config.manufacturer = 'Philips';\n    this.config.model = this.obj.type;\n    this.config.serialNumber = this.bridge.uuid_base + this.resource;\n    return;\n  }\n  this.config.manufacturer = this.obj.manufacturername;\n  this.config.model = this.obj.modelid;\n  this.config.serialNumber = this.obj.uniqueid.split('-')[0];\n  this.config.ignoreReachable = !this.bridge.platform.config.wallSwitch;\n\n  switch (this.config.manufacturer) {\n    case 'Philips':\n      // Color gamut per light model.\n      // See: http://www.developers.meethue.com/documentation/supported-lights\n      switch (this.config.model) {\n        case 'LLC001':                  // Lving Colors Gen1 Iris\n          if (this.obj.uniqueid === 'ff:ff:ff:ff:ff:ff:ff:ff-0b') {\n            this.config.serialNumber = this.bridge.uuid_base + this.resource;\n          }\n          this.config.ignoreReachable = true;\n          this.config.xy = false;\n          this.config.hs = true;\n          /* falls through */\n        case 'LLC006':                  // Living Colors Gen3 Iris\n        case 'LLC007':                  // Living Colors Gen3 Bloom, Aura\n        case 'LLC010':                  // Hue Living Colors Iris\n        case 'LLC011':                  // Hue Living Colors Bloom\n        case 'LLC012':                  // Hue Living Colors Bloom\n        case 'LLC013':                  // Disney Living Colors\n        case 'LST001':                  // Hue LightStrips\n          this.config.gamut = {         // Gamut A\n            R: {x: 0.7040, y: 0.2960},\n            G: {x: 0.2151, y: 0.7106},\n            B: {x: 0.1380, y: 0.0800}\n          };\n          return;\n        case 'LCT001':                  // Hue bulb A19\n        case 'LCT002':                  // Hue Spot BR30\n        case 'LCT003':                  // Hue Spot GU10\n        case 'LCT007':                  // Hue bulb A19\n        case 'LLM001':                  // Color Light Module\n          this.config.gamut = {         // Gamut B\n            R: {x: 0.6750, y: 0.3220},\n            G: {x: 0.4090, y: 0.5180},\n            B: {x: 0.1670, y: 0.0400}\n          };\n          return;\n        case 'LCT010':                  // Hue bulb A19\n        case 'LCT011':                  // Hue BR30\n        case 'LCT012':                  // Hue Color Candle\n        case 'LCT014':                  // Hue bulb A19\n        case 'LLC020':                  // Hue Go\n        case 'LST002':                  // Hue LightStrips Plus\n          this.config.gamut = {         // Gamut C\n            R: {x: 0.6920, y: 0.3080},\n            G: {x: 0.1700, y: 0.7000},\n            B: {x: 0.1530, y: 0.0480}\n          };\n          return;\n        case 'LTW001':                  // Hue A19 White Ambiance\n        case 'LTW004':                  // Hue A19 White Ambiance\n        case 'LTW012':                  // Hue Ambiance Candle\n        case 'LTW013':                  // Hue GU-10 White Ambiance\n        case 'LTW014':                  // Hue GU-10 White Ambiance\n        case 'LLM010':                  // Color Temperature Module\n        case 'LLM011':                  // Color Temperature Module\n        case 'LLM012':                  // Color Temperature Module\n          this.config.maxCT =  454;\n          return;\n        case 'LWL001':                  // Dimmable plug-in unit\n          this.config.ignoreReachable = true;\n          /* falls through */\n        case 'LWB004':                  // Hue A19 lux\n        case 'LWB006':                  // Hue A19 lux\n        case 'LWB007':                  // Hue A19 lux\n        case 'LWB010':                  // Hue A19 lux\n        case 'LWB014':                  // Hue A19 lux\n          return;\n        default:\n          break;\n      }\n      break;\n    case 'OSRAM':\n      switch (this.config.model) {\n        case 'Plug - LIGHTIFY':\n        case 'Plug 01':\n          this.config.ignoreReachable = true;\n          return;\n        case 'PAR16 50 TW':\n        case 'Classic B40 TW - LIGHTIFY':\n          this.config.maxCT = 370;\n          if (this.obj.swversion === 'V1.03.07') {\n            this.config.noTransitionTime = true;\n          }\n          return;\n        default:\n          break;\n      }\n      break;\n    case 'innr':\n      // See: https://shop.innrlighting.com/en/shop\n      switch (this.config.model) {\n        case 'FL 110':                  // Flex Light\n        case 'PL 110':                  // Puck Light\n        case 'ST 110':                  // Strip\n        case 'UC 110':                  // Under Cabinet\n        case 'SL 110':                  // Spot\n        case 'DL 110':                  // Spot\n          this.config.noAlert = true;\n          return;\n        case 'RB 162':                  // Bulb\n        case 'RS 125':                  // GU-10\n          return;\n        default:\n          break;\n        }\n      break;\n    case 'dresden elektronik':\n      switch (this.config.model) {\n        case 'FLS-PP3':                 // FLS-PP lp\n        case 'FLS-PP3 White':\n          this.config.subtype = this.obj.uniqueid.split('-')[1];\n          return;\n        default:\n          break;\n      }\n      break;\n    case 'Busch-Jaeger':\n      // See: https://www.busch-jaeger.de/en/products/product-solutions/dimmer/busch-radio-controlled-dimmer-zigbee-light-link/\n      switch (this.config.model) {\n        case 'RM01':                    // 6715 U-500 with 6736-84\n          return;\n        default:\n          break;\n      }\n      break;\n    case 'GE_Appliances':\n      switch (this.config.model) {\n        case 'ZLL Light':\n          return;\n        default:\n          break;\n      }\n      break;\n    case 'CREE ':\n      switch (this.config.model) {\n        case 'Connected A-19 60W Equivalent ':\n          return;\n        default:\n          break;\n      }\n      break;\n    default:\n      break;\n  }\n  this.log.error(\n    '%s: %s: warning: unknown light model %j',\n    this.bridge.name, this.resource, this.obj\n  );\n};\n\nHueLight.prototype.colorTemperature = function(ct) {\n  return Math.round(1000000.0 / ct);\n};\n\nHueLight.prototype.invColorTemperature = function(kelvin) {\n  return Math.max(\n    153, Math.min(Math.round(1000000.0 / kelvin), this.config.maxCT)\n  );\n};\n\n// Store desired HomeKit state to this.hk.\nHueLight.prototype.setHK = function() {\n  // jshint -W106\n  this.setState();\n  this.hk = {};\n  if (this.type === 'group') {\n    this.hk.on = this.state.all_on ? 1 : 0;\n    this.hk.any_on = this.state.any_on ? 1 : 0;\n  } else {\n    this.hk.on = (this.config.ignoreReachable || this.state.reachable) &&\n                 this.state.on ? 1 : 0;\n    this.hk.fault = this.state.reachable ? 0 : 1;\n  }\n  if (this.config.bri) {\n    this.hk.bri = Math.round(this.state.bri * 100.0 / 254.0);\n  }\n  if (this.config.ct) {\n    this.hk.ct = this.colorTemperature(this.state.ct);\n  }\n  if (this.config.xy) {\n    const hs = hueSat(this.state.xy, this.config.gamut);\n    this.hk.hue = hs.hue;\n    this.hk.sat = hs.sat;\n  } else if (this.config.hs) {\n    this.hk.hue = Math.round(this.state.hue * 360.0 / 65535.0);\n    this.hk.sat = Math.round(this.state.sat * 100.0 / 254.0);\n  }\n};\n\n// ===== Bridge Events =========================================================\n\nHueLight.prototype.heartbeat = function(obj) {\n  // jshint -W106\n  if (this.updating) {\n    return;\n  }\n  const old = {\n    state: this.state,\n    hk: this.hk\n  };\n  this.obj = obj;\n  this.setHK();\n  if (this.state.reachable !== old.state.reachable) {\n    this.log.debug(\n      '%s: %s reachable changed from %s to %s', this.name, this.type,\n      old.state.reachable, this.state.reachable\n    );\n  }\n  if (this.hk.fault !== old.hk.fault) {\n    this.log.info(\n      '%s: set homekit status fault from %s to %s', this.name,\n      old.hk.fault, this.hk.fault\n    );\n    this.service.getCharacteristic(Characteristic.StatusFault)\n      .updateValue(this.hk.fault);\n  }\n  if (this.state.on !== old.state.on) {\n    this.log.debug(\n      '%s: %s on changed from %s to %s', this.name, this.type,\n    \told.state.on, this.state.on\n    );\n  }\n  if (this.state.all_on !== old.state.all_on) {\n    this.log.debug(\n      '%s: %s all_on changed from %s to %s', this.name, this.type,\n    \told.state.all_on, this.state.all_on\n    );\n  }\n  if (this.hk.on !== old.hk.on) {\n    if (this.state.on && !this.state.reachable) {\n      this.log.info(\n        '%s: not reachable: set homekit power from %s to %s', this.name,\n      \told.hk.on, this.hk.on\n      );\n    } else {\n      this.log.info(\n        '%s: set homekit power from %s to %s', this.name,\n      \told.hk.on, this.hk.on\n      );\n    }\n    this.service.getCharacteristic(Characteristic.On)\n      .updateValue(this.hk.on);\n  }\n  if (this.state.any_on !== old.state.any_on) {\n    this.log.debug(\n      '%s: %s any_on changed from %s to %s', this.name, this.type,\n    \told.state.any_on, this.state.any_on\n    );\n  }\n  if (this.hk.any_on !== old.hk.any_on) {\n    this.log.info(\n      '%s: set homekit any on from %s to %s', this.name,\n    \told.hk.any_on, this.hk.any_on\n    );\n    this.service.getCharacteristic(Characteristic.AnyOn)\n      .updateValue(this.hk.any_on);\n  }\n  if (this.state.bri !== old.state.bri) {\n    this.log.debug(\n      '%s: %s bri changed from %s to %s', this.name, this.type,\n    \told.state.bri, this.state.bri\n    );\n  }\n  if (this.hk.bri !== old.hk.bri) {\n    this.log.info(\n      '%s: set homekit brightness from %s%% to %s%%', this.name,\n    \told.hk.bri, this.hk.bri\n    );\n    this.service.getCharacteristic(Characteristic.Brightness)\n      .updateValue(this.hk.bri);\n  }\n  if (this.state.ct !== old.state.ct) {\n    if (this.state.colormode === 'ct') {\n      this.log.debug(\n        '%s: %s ct changed from %s to %s', this.name, this.type,\n      \told.state.ct, this.state.ct\n      );\n    } else {\n      this.log.debug(\n        '%s: %s ct updated by %s from %s to %s', this.name, this.type,\n        this.state.colormode, old.state.ct, this.state.ct\n      );\n    }\n    if (this.bridge.platform.config.ct) {\n      this.log.info(\n        '%s: set homekit color temperature from %s mired to %s mired',\n        this.name, old.state.ct, this.state.ct\n      );\n      this.service.getCharacteristic(Characteristic.CT)\n        .updateValue(this.state.ct);\n    }\n  }\n  if (!this.bridge.platform.config.ct && this.hk.ct !== old.hk.ct) {\n    this.log.info(\n      '%s: set homekit color temperature from %sK to %sK',\n      this.name, old.hk.ct, this.hk.ct\n    );\n    this.service.getCharacteristic(Characteristic.ColorTemperature)\n      .updateValue(this.hk.ct);\n  }\n  if (this.state.hue !== old.state.hue) {\n    if (this.state.colormode === 'hs') {\n      this.log.debug(\n        '%s: %s hue changed from %s to %s', this.name, this.type,\n        old.state.hue, this.state.hue\n      );\n    } else {\n      this.log.debug(\n        '%s: %s hue changed by %s from %s to %s', this.name, this.type,\n        this.state.colormode, old.state.hue, this.state.hue\n      );\n    }\n  }\n  if (this.state.sat !== old.state.sat) {\n    if (this.state.colormode === 'hs') {\n      this.log.debug(\n        '%s: %s sat changed from %s to %s', this.name, this.type,\n        old.state.sat, this.state.sat\n      );\n    } else {\n      this.log.debug(\n        '%s: %s sat changed by %s from %s to %s', this.name, this.type,\n        this.state.colormode, old.state.sat, this.state.sat\n      );\n    }\n  }\n  if (\n    this.config.xy && (\n      this.state.xy[0] !== old.state.xy[0] ||\n      this.state.xy[1] !== old.state.xy[1]\n    )\n  ) {\n    if (this.state.colormode === 'xy') {\n      this.log.debug(\n        '%s: %s xy changed from %j to %j', this.name, this.type,\n      \told.state.xy, this.state.xy\n      );\n    } else {\n      this.log.debug(\n        '%s: %s xy changed by %s from %j to %j', this.name, this.type,\n      \tthis.state.colormode, old.state.xy, this.state.xy\n      );\n    }\n  }\n  if (this.hk.hue !== old.hk.hue) {\n    this.log.info(\n      '%s: set homekit hue from %s˚ to %s˚', this.name, old.hk.hue, this.hk.hue\n    );\n    this.service.getCharacteristic(Characteristic.Hue)\n      .updateValue(this.hk.hue);\n  }\n  if (this.hk.hue !== old.hk.hue) {\n    this.log.info(\n      '%s: set homekit saturation from %s%% to %s%%', this.name,\n      old.hk.sat, this.hk.sat\n    );\n    this.service.getCharacteristic(Characteristic.Saturation)\n      .updateValue(this.hk.sat);\n  }\n};\n\n// ===== Homekit Events ========================================================\n\nHueLight.prototype.identify = function(callback) {\n  this.log.info('%s: identify', this.name);\n  if (this.config.noAlert) {\n    return callback();\n  }\n  this.bridge.request('put', this.resourcePath, {alert: 'select'})\n  .then(function(obj) {\n    return callback();\n  }.bind(this))\n  .catch(function(err) {\n    return callback(new Error(err));\n  }.bind(this));\n};\n\nHueLight.prototype.setOn = function(on, callback) {\n  on = on ? 1 : 0;\n  if (on === this.hk.on) {\n    return callback();\n  }\n  this.log.info(\n    '%s: homekit power changed from %s to %s', this.name, this.hk.on, on\n  );\n  this.hk.on = on;\n  const newOn = this.hk.on ? true : false;\n  this.request('on', newOn);\n  if (this.config.noTransitionTime && !newOn) {\n    this.request('transitiontime', 0);\n  }\n  return callback();\n};\n\nHueLight.prototype.setAnyOn = function(on, callback) {\n  // jshint -W106\n  on = on ? 1 : 0;\n  if (on === this.hk.any_on) {\n    return callback();\n  }\n  this.log.info(\n    '%s: homekit any on changed from %s to %s', this.name, this.hk.any_on, on\n  );\n  this.hk.on = on;\n  const newOn = this.hk.on ? true : false;\n  this.request('on', newOn);\n  return callback();\n};\n\nHueLight.prototype.setBri = function(bri, callback) {\n  if (bri === this.hk.bri) {\n    return callback();\n  }\n  this.log.info(\n    '%s: homekit brightness changed from %s%% to %s%%', this.name,\n  \tthis.hk.bri, bri\n  );\n  this.hk.bri = bri;\n  const newBri = Math.round(this.hk.bri * 254 / 100);\n  this.request('bri', newBri);\n  return callback();\n};\n\nHueLight.prototype.setColorTemperature = function(ct, callback) {\n  if (ct === this.hk.ct) {\n    return callback();\n  }\n  this.log.info(\n    '%s: homekit color temperature changed from %sK to %sK', this.name,\n  \tthis.hk.ct, ct\n  );\n  this.hk.ct = ct;\n  const newCT = this.invColorTemperature(this.hk.ct);\n  this.request('ct', newCT);\n  return callback();\n};\n\nHueLight.prototype.setCT = function(ct, callback) {\n  if (ct === this.state.ct) {\n    return callback();\n  }\n  this.log.info(\n    '%s: homekit color temperature changed from %s mired to %s mired',\n    this.name, this.state.ct, ct);\n  this.request('ct', ct);\n  return callback();\n};\n\nHueLight.prototype.setHue = function(hue, callback) {\n  if (hue === this.hk.hue) {\n    return callback();\n  }\n  this.log.info(\n    '%s: homekit hue changed from %s˚ to %s˚', this.name, this.hk.hue, hue\n  );\n  this.hk.hue = hue;\n  if (this.config.xy) {\n    const newXY = invHueSat(this.hk.hue, this.hk.sat, this.config.gamut);\n    this.request('xy', [newXY[0], newXY[1]]);\n  } else {\n    const newHue = Math.round(this.hk.hue * 65535 / 360);\n    this.request('hue', newHue);\n  }\n  return callback();\n};\n\nHueLight.prototype.setSat = function(sat, callback) {\n  if (sat === this.hk.sat) {\n    return callback();\n  }\n  this.log.info(\n    '%s: homekit saturation changed from %s%% to %s%%', this.name,\n  \tthis.hk.sat, sat\n  );\n  this.hk.sat = sat;\n  if (this.config.xy) {\n    const newXY = invHueSat(this.hk.hue, this.hk.sat, this.config.gamut);\n    this.request('xy', [newXY[0], newXY[1]]);\n  } else {\n    const newSat = Math.round(this.hk.sat * 254 / 100);\n    this.request('sat', newSat);\n  }\n  return callback();\n};\n\n// Collect changes into a combined request.\nHueLight.prototype.request = function(key, value) {\n  this.updating = true;\n  if (this.desiredState) {\n    // Add this change to pending update.\n    this.desiredState[key] = value;\n    return;\n  }\n  this.desiredState = {};\n  this.desiredState[key] = value;\n  if (this.bridge.platform.config.waitTimeUpdate) {\n    setTimeout(function() {\n      this.put();\n    }.bind(this), this.bridge.platform.config.waitTimeUpdate);\n  } else {\n    this.put();\n  }\n};\n\n// Send the request (for the combined changes) to the Hue bridge.\nHueLight.prototype.put = function() {\n  // jshint -W106\n  const desiredState = this.desiredState;\n  this.desiredState = null;\n  this.bridge.request('put', this.resourcePath, desiredState)\n  .then (function(obj) {\n    for (const key in desiredState) {\n      this.state[key] = desiredState[key];\n    }\n    if (this.type === 'group' && desiredState.on !== undefined) {\n      this.state.any_on = desiredState.on;\n      this.state.all_on = desiredState.on;\n    }\n    this.updating = false;\n    return;\n  }.bind(this))\n  .catch(function(err) {\n    return;\n  }.bind(this));\n};\n","/home/travis/build/npmtest/node-npmtest-homebridge-hue/node_modules/homebridge-hue/lib/HueSensor.js":"// homebridge-hue/lib/HueSensor.js\n// Copyright © 2016, 2017 Erik Baauw. All rights reserved.\n//\n// Homebridge plugin for Philips Hue.\n//\n// HueSensor provides support for Philips Hue sensors.\n\n'use strict';\n\nconst util = require('util');\n\n// Link this module to HuePlatform.\nmodule.exports = {\n  setHomebridge: setHomebridge,\n  HueSensor: HueSensor\n};\n\n// ===== Homebridge ============================================================\n\n// Link this module to homebridge.\nlet Accessory;\nlet Service;\nlet Characteristic;\n\nfunction setHomebridge(homebridge) {\n  Accessory = homebridge.platformAccessory;\n  Service = homebridge.hap.Service;\n  Characteristic = homebridge.hap.Characteristic;\n}\n\nfunction hkLightLevel(v) {\n  let l = v ? Math.pow(10, (v - 1) / 10000) : 0.0001;\n  l = Math.round(l * 10000) / 10000;\n  return l > 100000 ? 100000 : l < 0.0001 ? 0.0001 : l;\n}\n\n// As homebridge-hue polls the Hue bridge, not all dimmer switch buttonevents\n// are received reliably.  Consequently, we only issue one HomeKit change per\n// Press/Hold/Release event series.\nfunction hkZLLSwitchAction(value, oldValue) {\n  const button = Math.floor(value / 1000);\n  const oldButton = Math.floor(oldValue / 1000);\n  const event = value % 1000;\n  const oldEvent = oldValue % 1000;\n  switch (event) {\n    case 0:   // Press\n      return undefined;         // Wait for Hold or Release after press.\n    case 2:   // Release after press\n      return Characteristic.ProgrammableSwitchEvent.SINGLE_PRESS;\n    case 1:   // Hold\n    case 3:   // Release after hold\n      if (button === oldButton && oldEvent === 1) {\n        // Already issued action on previous Hold.\n        return undefined;\n      }\n      return Characteristic.ProgrammableSwitchEvent.LONG_PRESS;\n  }\n}\n\n// ===== HueSensor =============================================================\n\nfunction HueSensor(bridge, id, obj) {\n  // jshint -W106\n  this.log = bridge.log;\n  this.bridge = bridge;\n  this.name = obj.name;\n  this.obj = obj;\n  this.resource = '/sensors/' + id;\n\n  if (this.obj.type[0] === 'Z') {\n    // Zigbee sensor.\n    this.manufacturer = this.obj.manufacturername;\n    this.model = this.obj.modelid;\n    this.uuid_base = this.obj.uniqueid.split('-')[0];\n  } else {\n    // Hue bridge internal sensor.\n    this.manufacturer = 'Philips';\n    this.model = this.obj.type;\n    this.uuid_base = this.bridge.uuid_base + this.resource;\n  }\n  this.infoService = new Service.AccessoryInformation();\n  this.serviceList = [this.infoService];\n\n  // See: http://www.developers.meethue.com/documentation/supported-sensors\n  let buttonIndex;\n  switch(this.obj.type) {\n    case 'ZGPSwitch':   // 1.1 - Hue Tap\n      buttonIndex = 1;\n      ['1', '2', '3', '4'].map(function(button) {\n        const service = new Service.StatelessProgrammableSwitch(\n          this.name + ' ' + button, button\n        );\n        this.serviceList.push(service);\n        service.getCharacteristic(Characteristic.ProgrammableSwitchEvent)\n          .setProps({\n            minValue: Characteristic.ProgrammableSwitchEvent.SINGLE_PRESS,\n            maxValue: Characteristic.ProgrammableSwitchEvent.SINGLE_PRESS\n          });\n        service.getCharacteristic(Characteristic.LabelIndex)\n          .setValue(buttonIndex);\n        buttonIndex += 1;\n      }.bind(this));\n      this.service = new Service.Resource(this.name);\n      this.type = {\n        key:            'buttonevent',\n        homekitValue:   function(v) {return {34: 1, 16: 2, 17: 3, 18: 4}[v];},\n        homekitAction:  function() {return 0;}\n      };\n      break;\n    case 'ZLLSwitch': \t// 1.2 - Hue Wireless Dimmer Switch\n      buttonIndex = 1;\n      ['On', 'Dim Up', 'Dim Down', 'Off'].map(function(button) {\n        const service = new Service.StatelessProgrammableSwitch(\n          this.name + ' ' + button, button\n        );\n        this.serviceList.push(service);\n        service.getCharacteristic(Characteristic.ProgrammableSwitchEvent)\n          .setProps({\n            minValue: Characteristic.ProgrammableSwitchEvent.SINGLE_PRESS,\n            maxValue: Characteristic.ProgrammableSwitchEvent.LONG_PRESS,\n            validValues: [\n              Characteristic.ProgrammableSwitchEvent.SINGLE_PRESS,\n              Characteristic.ProgrammableSwitchEvent.LONG_PRESS\n            ]\n          });\n          service.getCharacteristic(Characteristic.LabelIndex)\n            .setValue(buttonIndex);\n          buttonIndex += 1;\n      }.bind(this));\n      this.service = new Service.Resource(this.name);\n      this.type = {\n        key:            'buttonevent',\n        homekitValue:   function(v) {return Math.floor(v / 1000);},\n        homekitAction:  hkZLLSwitchAction\n      };\n      break;\n    case 'ZLLPresence':\t// 1.3 - Hue Motion Sensor\n      this.service = new Service.MotionSensor(this.name);\n      this.type = {\n        Characteristic: Characteristic.MotionDetected,\n        key:\t\t        'presence',\n        name:\t\t        'motion',\n        unit:\t\t        '',\n        homekitValue:   function(v) {return v ? 1 : 0;}\n      };\n      break;\n    case 'ZLLTemperature': // 1.4 - Hue Motion Sensor\n      /* falls through */\n    case 'CLIPTemperature': // 2.4\n      this.service = new Service.TemperatureSensor(this.name);\n      this.type = {\n        Characteristic:\tCharacteristic.CurrentTemperature,\n        props:          { minValue: -273.2, maxValue: 1000.0 },\n        key:\t\t        'temperature',\n        name:\t\t        'temperature',\n        unit:\t\t        '˚C',\n        homekitValue:   function(v) {return v ? Math.round(v / 10) / 10 : 0;}\n      };\n      break;\n    case 'ZLLLightLevel': // 2.7 - Hue Motion Sensor\n      /* falls through */\n    case 'CLIPLightLevel': // 2.7\n      this.service = new Service.LightSensor(this.name);\n      this.type = {\n        Characteristic:\tCharacteristic.CurrentAmbientLightLevel,\n        key:\t\t        'lightlevel',\n        name:\t\t        'light level',\n        unit:\t\t        ' lux',\n        homekitValue:   hkLightLevel\n      };\n      break;\n    case 'CLIPOpenClose': // 2.2\n      this.service = new Service.ContactSensor(this.name);\n      this.type = {\n        Characteristic:\tCharacteristic.ContactSensorState,\n        key:\t\t        'open',\n        name:\t\t        'contact',\n        unit:\t\t        '',\n        homekitValue:   function(v) {return v ? 0 : 1;}\n      };\n      break;\n    case 'CLIPPresence': // 2.3\n    case 'Geofence':    // Undocumented\n      this.service = new Service.OccupancySensor(this.name);\n      this.type = {\n        Characteristic:\tCharacteristic.OccupancyDetected,\n        key:\t\t        'presence',\n        name:\t\t        'occupancy',\n        unit:\t\t        '',\n        homekitValue:   function(v) {return v ? 1 : 0;}\n      };\n      break;\n    case 'CLIPHumidity': // 2.5\n      this.service = new Service.HumiditySensor(this.name);\n      this.type = {\n        Characteristic:\tCharacteristic.CurrentRelativeHumidity,\n        key:\t\t        'humidity',\n        name:\t\t        'humidity',\n        unit:\t\t        '%',\n        homekitValue:   function(v) {return v ? Math.round(v / 100) : 0;}\n      };\n      break;\n    case 'Daylight': // 2.6 - Built-in daylight sensor.\n      this.manufacturer = this.obj.manufacturername;\n      this.model = this.obj.modelid;\n      this.service = new Service.LightSensor(this.name);\n      this.type = {\n        Characteristic: Characteristic.CurrentAmbientLightLevel,\n        key:\t\t        'daylight',\n        name:\t\t        'light level',\n        unit:\t\t        ' lux',\n        homekitValue:   function(v) {return v ? 100000.0 : 0.0001;}\n      };\n      break;\n    case 'CLIPGenericFlag':\t// 2.8\n      this.service = new Service.Switch(this.name);\n      this.type = {\n        Characteristic:\tCharacteristic.On,\n        key:\t\t        'flag',\n        name:\t\t        'power',\n        unit:\t\t        '',\n        homekitValue:   function(v) {return v ? 1 : 0;},\n        bridgeValue:    function(v) {return v ? true : false;},\n        setter:         true\n      };\n      break;\n    case 'CLIPGenericStatus': // 2.9\n      this.service = new Service.Status(this.name);\n      this.type = {\n        Characteristic:\tCharacteristic.Status,\n        key:\t\t        'status',\n        name:\t\t        'status',\n        unit:\t\t        '',\n        homekitValue:   function(v) {return v > 255 ? 255 : v < 0 ? 0 : v;},\n        bridgeValue:    function(v) {return v;},\n        setter:         true\n      };\n      if (obj.modelid === 'PHCLGS' &&\n          Number(obj.swversion) === parseInt(obj.swversion)) {\n        const max = Number(obj.swversion);\n        if (max > 0 && max <= 255) {\n          // this.log.debug('%s: maxValue %j', this.name, max);\n          this.type.props = {maxValue: max};\n        }\n      }\n      break;\n    case 'CLIPSwitch': // 2.1\n      this.log.error(\n        '%s: %s: unsupported sensor type %s',\n        this.bridge.name, this.resource, this.obj.type\n      );\n      break;\n    default:\n      this.log.error(\n        '%s: %s: unknown sensor type %j',\n        this.bridge.name, this.resource, this.obj\n      );\n      break;\n  }\n\n  this.infoService\n    .updateCharacteristic(Characteristic.Manufacturer, this.manufacturer)\n    .updateCharacteristic(Characteristic.Model, this.model)\n    .updateCharacteristic(Characteristic.SerialNumber, this.uuid_base);\n\n  if (this.service) {\n    this.refresh();\n    this.serviceList.push(this.service);\n    if (this.type.Characteristic) {\n      const char = this.service.getCharacteristic(this.type.Characteristic);\n      if (this.type.props) {\n        char.setProps(this.type.props);\n      }\n      char.updateValue(this.hk.value);\n      if (this.type.setter) {\n        char.on('set', this.setValue.bind(this));\n      }\n    }\n    if (this.hk.dark !== undefined) {\n      this.service.addOptionalCharacteristic(Characteristic.Dark);\n      this.service.getCharacteristic(Characteristic.Dark)\n        .updateValue(this.hk.dark);\n    }\n    if (this.hk.daylight !== undefined) {\n      this.service.addOptionalCharacteristic(Characteristic.Daylight);\n      this.service.getCharacteristic(Characteristic.Daylight)\n        .updateValue(this.hk.daylight);\n    }\n    this.service.addOptionalCharacteristic(Characteristic.LastUpdated);\n    this.service.getCharacteristic(Characteristic.LastUpdated)\n      .updateValue(this.hk.lastupdated);\n    this.service.addOptionalCharacteristic(Characteristic.Enabled);\n    this.service.getCharacteristic(Characteristic.Enabled)\n      .updateValue(this.hk.enabled)\n      .on('set', this.setEnabled.bind(this));\n    this.service.addOptionalCharacteristic(Characteristic.StatusActive);\n    this.service.getCharacteristic(Characteristic.StatusActive)\n      .updateValue(this.hk.enabled);\n    if (this.obj.config.reachable !== undefined) {\n      this.service.addOptionalCharacteristic(Characteristic.StatusFault);\n      this.service.getCharacteristic(Characteristic.StatusFault)\n        .updateValue(this.hk.fault);\n    }\n    if (this.hk.sensitivity !== undefined) {\n      this.service.addOptionalCharacteristic(Characteristic.Sensitivity);\n      this.service.getCharacteristic(Characteristic.Sensitivity)\n        .updateValue(this.hk.sensitivity)\n        .on('set', this.setSensitivity.bind(this));\n      this.service.addOptionalCharacteristic(Characteristic.Duration);\n      this.duration = 0;\n      this.hk.duration = 0;\n      this.service.getCharacteristic(Characteristic.Duration)\n        .updateValue(this.hk.duration)\n        .on('set', this.setDuration.bind(this));\n    }\n    this.service.addOptionalCharacteristic(Characteristic.Resource);\n    this.service.getCharacteristic(Characteristic.Resource)\n      .updateValue(this.resource);\n    if (this.obj.config.battery) {\n      this.batteryService = new Service.BatteryService(this.name);\n      this.batteryService\n        .updateCharacteristic(Characteristic.BatteryLevel, this.hk.battery)\n        .updateCharacteristic(Characteristic.StatusLowBattery, this.hk.lowBattery)\n        .updateCharacteristic(Characteristic.ChargingState, this.hk.charging);\n    }\n  }\n}\n\nHueSensor.prototype.getServices = function() {\n  if (this.batteryService) {\n    this.serviceList.push(this.batteryService);\n  }\n  return this.serviceList;\n};\n\n// Translate bridge values to homekit values.\nHueSensor.prototype.refresh = function() {\n  this.value = this.obj.state[this.type.key];\n  this.hk = {};\n  this.hk.value = this.type.homekitValue(this.value);\n  if (this.obj.state.dark !== undefined) {\n    this.hk.dark = this.obj.state.dark ? 1 : 0;\n  }\n  if (this.obj.state.daylight !== undefined) {\n    this.hk.daylight = this.obj.state.daylight ? 1 : 0;\n  }\n  this.hk.lastupdated = this.obj.state.lastupdated === 'none' ?\n    'n/a' : String(new Date(this.obj.state.lastupdated)).substring(0, 25);\n  this.hk.enabled = this.obj.config.on ? 1 : 0;\n  this.hk.fault = this.obj.config.reachable ? 0 : 1;\n  if (this.obj.config.sensitivity !== undefined) {\n    this.hk.sensitivity = this.obj.config.sensitivity;\n    this.hk.duration = this.duration / 60000;\n  }\n  this.hk.battery = this.obj.config.battery ? this.obj.config.battery : 100;\n  this.hk.lowBattery =\n    this.hk.battery <= this.bridge.platform.config.lowBattery ?\n    Characteristic.StatusLowBattery.BATTERY_LEVEL_LOW :\n    Characteristic.StatusLowBattery.BATTERY_LEVEL_NORMAL;\n  this.hk.charging = Characteristic.ChargingState.NOT_CHARGEABLE;\n};\n\n// ===== Bridge Events =========================================================\n\nHueSensor.prototype.heartbeat = function(obj) {\n  if (!this.service) {\n    return;\n  }\n  const old = {\n    obj: this.obj,\n    value: this.value,\n    hk: this.hk\n  };\n  this.obj = obj;\n  this.refresh();\n  if (this.type.key === 'buttonevent') {\n    if (this.obj.state.lastupdated !== old.obj.state.lastupdated) {\n      this.log.debug(\n        '%s: sensor buttonevent %d on %s', this.name,\n      \tthis.value, this.obj.state.lastupdated\n      );\n      const action = this.type.homekitAction(this.value, old.value);\n      if (this.hk.value !== 0 && action !== undefined) {\n        this.log.info(\n          '%s: homekit button %s', this.serviceList[this.hk.value].displayName,\n          {0: 'single press', 1: 'double press', 2: 'long press'}[action]\n        );\n        this.serviceList[this.hk.value]\n          .getCharacteristic(Characteristic.ProgrammableSwitchEvent)\n          .updateValue(action);\n      }\n    }\n  } else {\n    if (this.value !== old.value) {\n      this.log.debug(\n        '%s: sensor %s changed from %s to %s on %s', this.name,\n      \tthis.type.key, old.value, this.value, this.obj.state.lastupdated\n      );\n    }\n    if (this.hk.value !== old.hk.value) {\n      if (this.durationTimer) {\n        clearTimeout(this.durationTimer);\n        this.durationTimer = null;\n      }\n      if (this.duration > 0  && this.hk.value === 0) {\n        this.log.debug(\n          '%s: keep homekit %s on %s%s for %dm on %s', this.name,\n          this.type.name, old.hk.value, this.type.unit, this.hk.duration,\n          this.hk.lastupdated\n        );\n        const saved = {\n          oldValue: old.hk.value,\n          value: this.hk.value,\n          duration: this.hk.duration,\n          lastupdated: this.hk.lastupdated\n        };\n        this.durationTimer = setTimeout(function () {\n          this.log.info(\n            '%s: set homekit %s from %s%s to %s%s, %dm after %s',\n            this.name, this.type.name, saved.oldValue, this.type.unit,\n          \tsaved.value, this.type.unit, saved.duration, saved.lastupdated\n          );\n          this.durationTimer = null;\n          this.service\n            .updateCharacteristic(this.type.Characteristic, saved.value);\n        }.bind(this), this.duration);\n      } else {\n        this.log.info(\n          '%s: set homekit %s from %s%s to %s%s on %s', this.name,\n        \tthis.type.name, old.hk.value, this.type.unit,\n        \tthis.hk.value, this.type.unit, this.hk.lastupdated\n        );\n        this.service\n          .updateCharacteristic(this.type.Characteristic, this.hk.value);\n        }\n    }\n  }\n  if (this.obj.state.dark !== old.obj.state.dark) {\n    this.log.debug(\n      '%s: sensor dark changed from %s to %s', this.name,\n      old.obj.state.dark, this.obj.state.dark\n    );\n  }\n  if (this.hk.dark !== old.hk.dark) {\n    this.log.info(\n      '%s: set homekit dark from %s to %s', this.name,\n      old.hk.dark, this.hk.dark\n    );\n    this.service.updateCharacteristic(Characteristic.Dark, this.hk.dark);\n  }\n  if (this.obj.state.daylight !== old.obj.state.daylight) {\n    this.log.debug(\n      '%s: sensor daylight changed from %s to %s', this.name,\n      old.obj.state.daylight, this.obj.state.daylight\n    );\n  }\n  if (this.hk.daylight !== old.hk.daylight) {\n    this.log.info(\n      '%s: set homekit daylight from %s to %s', this.name,\n      old.hk.daylight, this.hk.daylight\n    );\n    this.service\n      .updateCharacteristic(Characteristic.Daylight, this.hk.daylight);\n  }\n  if (this.obj.config.sensitivity !== old.obj.config.sensitivity) {\n    this.log.debug(\n      '%s: sensor sensitivity changed from %s to %s', this.name,\n      old.obj.config.sensitivity, this.obj.config.sensitivity\n    );\n  }\n  if (this.obj.state.lastupdated !== old.obj.state.lastupdated) {\n    this.service\n      .updateCharacteristic(Characteristic.LastUpdated, this.hk.lastupdated);\n  }\n  if (this.obj.config.on !== old.obj.config.on) {\n    this.log.debug(\n      '%s: sensor on changed from %s to %s', this.name,\n      old.obj.config.on, this.obj.config.on\n    );\n  }\n  if (this.hk.enabled !== old.hk.enabled) {\n    this.log.info(\n      '%s: set homekit enabled from %s to %s', this.name,\n      old.hk.enabled, this.hk.enabled\n    );\n    this.service\n      .updateCharacteristic(Characteristic.Enabled, this.hk.enabled)\n      .updateCharacteristic(Characteristic.StatusActive, this.hk.enabled);\n  }\n  if (\n    this.obj.config.reachable !== undefined &&\n    this.obj.config.reachable !== old.obj.config.reachable\n  ) {\n    this.log.debug(\n      '%s: sensor reachable changed from %s to %s', this.name,\n      old.obj.config.reachable, this.obj.config.reachable\n    );\n  }\n  if (this.hk.fault !== old.hk.fault) {\n    this.log.info(\n      '%s: set homekit status fault from %s to %s', this.name,\n      old.hk.fault, this.hk.fault\n    );\n    this.service\n      .updateCharacteristic(Characteristic.StatusFault, this.hk.fault);\n  }\n  if (this.hk.sensitivity !== old.hk.sensitivity) {\n    this.log.info(\n      '%s: set homekit sensitivity from %s to %s', this.name,\n      old.hk.sensitivity, this.hk.sensitivity\n    );\n    this.service\n      .updateCharacteristic(Characteristic.Sensitivity, this.hk.sensitivity);\n  }\n  if (\n    this.obj.config.battery !== undefined &&\n    this.obj.config.battery != old.obj.config.battery\n  ) {\n    this.log.debug(\n      '%s: sensor battery changed from %s to %s', this.name,\n      old.obj.config.battery, this.obj.config.battery);\n  }\n  if (this.hk.battery !== old.hk.battery) {\n    this.log.info(\n      '%s: set homekit battery level from %s%% to %s%%', this.name,\n      old.hk.battery, this.hk.battery\n    );\n    this.batteryService\n      .updateCharacteristic(Characteristic.BatteryLevel, this.hk.battery)\n      .updateCharacteristic(\n        Characteristic.StatusLowBattery, this.hk.lowBattery\n      );\n  }\n};\n\n// ===== Homekit Events ========================================================\n\nHueSensor.prototype.identify = function(callback) {\n  this.log.info('%s: identify', this.name);\n  if (this.obj.config.alert === undefined) {\n    return callback();\n  }\n  this.bridge.request('put', this.resource + '/config', {alert: 'select'})\n  .then(function(obj) {\n    return callback();\n  }.bind(this))\n  .catch(function(err) {\n    return callback(new Error(err));\n  }.bind(this));\n};\n\nHueSensor.prototype.setValue = function(value, callback) {\n  if (value === this.hk.value) {\n    return callback();\n  }\n  this.log.info(\n    '%s: homekit %s changed from %s%s to %s%s', this.name,\n    this.type.name,\tthis.hk.value, this.type.unit, value, this.type.unit\n  );\n  this.hk.value = value;\n  const newValue = this.type.bridgeValue(value);\n  const body = {};\n  body[this.type.key] = newValue;\n  this.bridge.request('put', this.resource + '/state', body)\n  .then(function(obj) {\n    this.obj.state[this.type.key] = newValue;\n    this.value = newValue;\n    return callback();\n  }.bind(this))\n  .catch(function(err) {\n    return callback(new Error(err));\n  }.bind(this));\n};\n\nHueSensor.prototype.setEnabled = function(enabled, callback) {\n  enabled = enabled ? 1 : 0;\n  if (enabled === this.hk.enabled) {\n    return callback();\n  }\n  this.log.info(\n    '%s: homekit enabled changed from %s to %s', this.name,\n  \tthis.hk.enabled, enabled\n  );\n  this.hk.enabled = enabled;\n  const on = this.hk.enabled ? true : false;\n  this.bridge.request('put', this.resource + '/config', {on: on})\n  .then(function(obj) {\n    this.obj.config.on = on;\n    this.service\n      .updateCharacteristic(Characteristic.StatusActive, this.hk.enabled);\n    return callback();\n  }.bind(this))\n  .catch(function(err) {\n    return callback(new Error(err));\n  }.bind(this));\n};\n\nHueSensor.prototype.setSensitivity = function(sensitivity, callback) {\n  if (sensitivity === this.hk.sensitivity) {\n    return callback();\n  }\n  this.log.info(\n    '%s: homekit sensitivity changed from %s to %s', this.name,\n  \tthis.hk.sensitivity, sensitivity\n  );\n  this.hk.sensitivity = sensitivity;\n  this.bridge.request(\n    'put', this.resource + '/config', {sensitivity: sensitivity}\n  )\n  .then(function(obj) {\n    this.obj.config.sensitivity = sensitivity;\n    return callback();\n  }.bind(this))\n  .catch(function(err) {\n    return callback(new Error(err));\n  }.bind(this));\n};\n\nHueSensor.prototype.setDuration = function(duration, callback) {\n  if (duration === this.hk.duration) {\n    return callback();\n  }\n  this.log.info(\n    '%s: homekit duration changed from %sm to %sm', this.name,\n  \tthis.hk.duration, duration\n  );\n  this.hk.duration = duration;\n  this.duration = duration * 60000;\n  return callback();\n};\n","/home/travis/build/npmtest/node-npmtest-homebridge-hue/node_modules/homebridge-hue/lib/HueSchedule.js":"// homebridge-hue/lib/HueSchedule.js\n// Copyright © 2016, 2017 Erik Baauw. All rights reserved.\n//\n// Homebridge plugin for Philips Hue.\n//\n// HueSchedule provides support for Philips Hue schedules and rules.\n\n'use strict';\n\nmodule.exports = {\n  setHomebridge: setHomebridge,\n  HueSchedule: HueSchedule\n};\n\n// ===== Homebridge ============================================================\n\nlet Accessory;\nlet Service;\nlet Characteristic;\n\nfunction setHomebridge(homebridge) {\n  Accessory = homebridge.platformAccessory;\n  Service = homebridge.hap.Service;\n  Characteristic = homebridge.hap.Characteristic;\n}\n\n// ===== HueSchedule ===========================================================\n\nfunction HueSchedule(bridge, id, obj, type) {\n  // jshint -W106\n  this.log = bridge.log;\n  this.bridge = bridge;\n  this.name = obj.name;\n  this.type = type ? type : 'schedule';\n  this.resource = '/' + this.type + 's/' + id;\n  this.uuid_base = bridge.uuid_base + '/' + this.resource;\n  this.obj = obj;\n  this.refresh();\n\n  this.infoService = new Service.AccessoryInformation();\n  this.infoService\n    .updateCharacteristic(Characteristic.Manufacturer, 'Philips')\n    .updateCharacteristic(Characteristic.Model, type === 'schedule' ?\n      'Schedule' : 'Rule'\n    )\n    .updateCharacteristic(Characteristic.SerialNumber, this.uuid_base);\n  this.service = new Service.Resource(this.name, this.resource);\n  this.service.getCharacteristic(Characteristic.Enabled)\n    .updateValue(this.hk.enabled)\n    .on('set', this.setEnabled.bind(this));\n  if (this.type === 'rule') {\n    this.service\n      .updateCharacteristic(Characteristic.LastTriggered, this.hk.lasttriggered)\n      .updateCharacteristic(\n        Characteristic.TimesTriggered, this.hk.timestriggered\n      );\n  }\n  this.service\n    .updateCharacteristic(Characteristic.StatusActive, this.hk.enabled)\n    .updateCharacteristic(Characteristic.Resource, this.resource);\n}\n\nHueSchedule.prototype.getServices = function() {\n  return [this.service, this.infoService];\n};\n\nHueSchedule.prototype.refresh = function() {\n  this.hk = {};\n  this.hk.enabled = this.obj.status === 'enabled' ? 1 : 0;\n  if (this.type === 'rule') {\n    this.hk.lasttriggered = this.obj.lasttriggered === 'none' ? 'n/a' :\n    \t\t   String(new Date(this.obj.lasttriggered)).substring(0, 25);\n    this.hk.timestriggered = this.obj.timestriggered;\n  }\n};\n\n// ===== Bridge Events =========================================================\n\nHueSchedule.prototype.heartbeat = function(obj) {\n  const old = {\n    obj: this.obj,\n    hk: this.hk\n  };\n  this.obj = obj;\n  this.refresh();\n  if (this.obj.status !== old.obj.status) {\n    this.log.info(\n      '%s: change homekit enabled from %s to %s', this.name,\n      old.hk.enabled, this.hk.enabled\n    );\n    this.service\n      .updateCharacteristic(Characteristic.Enabled, this.hk.enabled)\n      .updateCharacteristic(Characteristic.StatusActive, this.hk.enabled);\n  }\n  if (this.obj.lasttriggered !== old.obj.lasttriggered) {\n    this.log.debug(\n      '%s: rule triggered on %s', this.name, this.hk.lasttriggered\n    );\n    this.service\n      .updateCharacteristic(Characteristic.LastTriggered, this.hk.lasttriggered)\n      .updateCharacteristic(\n        Characteristic.TimesTriggered, this.hk.timestriggered\n      );\n  }\n};\n\n// ===== Homekit Events ========================================================\n\nHueSchedule.prototype.identify = function(callback) {\n  this.log.info('%s: identify', this.name);\n  return callback();\n};\n\nHueSchedule.prototype.setEnabled = function(enabled, callback) {\n  enabled = enabled ? 1 : 0;\n  if (enabled === this.hk.enabled) {\n    return callback();\n  }\n  this.log.info(\n    '%s: homekit enabled changed from %s to %s', this.name,\n    this.hk.enabled, enabled\n  );\n  const status = enabled ? 'enabled' : 'disabled';\n  this.bridge.request('put', this.resource, {status: status})\n  .then(function(obj) {\n    this.obj.status = status;\n    this.refresh();\n    this.service\n      .updateCharacteristic(Characteristic.StatusActive, this.hk.enabled);\n    return callback();\n  }.bind(this))\n  .catch(function(err) {\n    return callback(new Error(err));\n  }.bind(this));\n};\n"}